{"version":3,"sources":["componenets/Firebase/context.js","componenets/Firebase/firebase.js","componenets/Firebase/index.js","componenets/Session/withAuthorization.js","constants/routes.js","componenets/PasswordReset.js","componenets/WelcomeMessage.js","componenets/SignIn.js","componenets/SignUp.js","componenets/SignOutButton.js","componenets/UsedPlayers/UsedPlayerButton.js","componenets/Roster/SearchDropdowns.js","componenets/Roster/index.js","componenets/Home/Leaderboard.js","componenets/Home/index.js","componenets/NavBar.js","componenets/PasswordChange.js","componenets/UserProfile.js","componenets/CreateGroup.js","componenets/UserSearch.js","componenets/GroupPage/UserList.js","componenets/GroupPage/GroupNav.js","componenets/GroupPage/index.js","componenets/SeasonLongScore/index.js","componenets/AdminPanel/PlayerEditor.js","componenets/AdminPanel/UserEditor.js","componenets/AdminPanel/index.js","componenets/AdminPanel/UpgradeToAdmin.js","componenets/Roster/RosterButton.js","componenets/UsedPlayers/index.js","componenets/GroupPage/CreateAllGroup.js","App.js","index.js"],"names":["FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","require","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","app","currentUser","updatePassword","initializeApp","this","withAuthorization","condition","WithAuthorization","listener","onAuthStateChanged","authUser","history","push","compose","withRouter","inputStyle","width","height","initialState","error","PasswordResetFormBase","onSubmit","event","state","then","setState","catch","preventDefault","onChange","target","name","value","isInvalid","className","message","style","type","placeholder","disabled","PasswordResetLink","Link","to","Button","color","PasswordResetForm","WelcomeMessage","fontSize","labelStyle","marginBottom","formStyle","display","marginLeft","marginRight","SignInFormBase","handleChange","handleSubmit","a","Form","FormGroup","Label","Input","size","SignInForm","SignInLink","SignInPage","Row","Col","xs","form","labelDescription","username","confirmPassword","redirectTo","emailValid","passwordValid","usernameValid","validMessage","SignUpFormBase","checkValidInput","axios","post","status","console","log","validateForm","invalidInputs","invalidMessages","fieldName","validCheck","match","checkPassword","length","noSpacesInPassword","checkUsername","usernameLength","dummyData","isValid","map","i","key","id","onClick","SignUpForm","SignUpLink","SignUpPage","textStyle","textDecoration","UsedPlayerButton","redirect","redirectValue","userId","WeekSearch","weekSelect","customSeasonWeekSearch","TeamSearch","for","teamSelect","searchByTeam","PositionSearch","positionSelect","positionSearch","Alert","withReactContent","Swal","Roster","clearPlayers","userRoster","getRosterData","week","season","weekOnPage","seasonOnPage","loading","get","params","groupId","res","data","groupPositions","doneLoading","err","countLogic","roster","QBCount","RBCount","WRCount","TECount","KCount","position","P","countRoster","originalRoster","updatedRoster","originalAvailablePlayers","addedPlayer","tooManyPlayers","filteredRoster","filter","player","fullPlayers","M","N","fire","title","input","inputPlaceholder","inputOptions","showCancelButton","chosenPlayer","intChosenPlayer","parseInt","intAddedPlayer","availablePlayers","slice","droppedPlayerIndex","availDroppedPlayerIndex","droppedPlayer","find","splice","T","pop","unshift","checkRoster","saveRosterToDb","text","confirmButtonColor","confirmButtonText","undefined","response","saveWithNoDrop","put","seasonSelect","checkLockPeriod","LW","e","searchedPosition","addPlayerToRoster","newRoster","sortedUpdatedRoster","addedPosition","addDropPlayer","mySportsId","addOrDrop","newAvailablePlayers","addedPlayerIndex","needToSave","dbReadyRoster","bind","usernameOfPage","checkCurrentUser","getCurrentUsername","prevProps","UN","imageUrl","imageWidth","imageHeight","imageAlt","showConfirmButton","close","Container","fluid","md","nameCol","scoreCol","CurrentRosterRow","score","AvailablePlayerRow","RosterDisplay","Leaderboard","getDataForLeaderboard","userList","columns","Header","accessor","show","toString","defaultSorted","desc","defaultPageSize","getTdProps","rowInfo","userClicked","original","Home","sortRoster","sortedRoster","positionOrder","ii","getRoster","userIdDisplayed","userDisplayed","leaderboardUserClicked","group","_id","getUserName","isAdmin","smCol","mdCol","lockperoid","sm","groupName","HomeLink","testStyle","LeftPanel","UserLinks","background","backgroundColor","overflow","padding2","textAlign","navLinkStyle","NavBar","Navbar","expand","Nav","navbar","NavItem","NavLink","href","initalState","passwordConfirm","PasswordChangeForm","htmlFor","buttonStyle","centerText","updateProfileStyle","header","marginTop","profileDisplayStyle","initialUpdateState","firstname","lastname","initialProfileState","dbUsername","dbEmail","dbFirstname","dbLastname","isCurrentUser","UserProfile","userIDFromURL","userID","updatedProfile","getUserData","dbResponse","local","PasswordChange","UpdateInformationForm","fieldSubmitted","request","usernameIsInvalid","emailIsInvalid","firstnameIsInvalid","lastnameIsInvalid","groupDescription","margin","inputSize","headerStyle","descriptionStyle","CreateGroup","currentUserID","formlabelStyle","forminputsize","UserSearch","userSearch","searchSelect","userArray","user","groupID","updatePage","SingleUser","addUserToGroup","componentDidMount","UserList","userlist","ButtonStyle","adminPanel","border","padding","borderRadius","GroupNav","align","outline","showMainPage","addUser","groupinfopanel","columnbackground","GroupPage","getGroupData","description","checkAdmin","showPage","updateBook","groupIDFromURL","GroupInfo","SeasonLongScore","displayReadyRosters","seasonData","seasonRostersArray","sortWeek","weekArray","displayReadyRoster","QB","RB1","RB2","Flex","WR1","WR2","TE","K","rosterPlayers","weekRoster","WeekDisplay","currentRoster","PlayerEditor","updateNFLRoster","getMassData","result","getWeeklyData","rankPlayers","UserEditor","dummyRoster","selectedUser","groupSelect","createRoster","selectUser","isSelected","groupList","calculateScores","fillDummyRoster","SelectedUser","UserTable","filterable","AdminPanel","showPlayerEditor","playerEditor","userEditor","showUserEditor","createAllRosters","UpgradeToAdmin","upgradeToAdmin","serverResponse","RosterButton","UsedPlayers","getUsedPlayers","usedPlayers","CreateAllGroup","PurgeDB","App","isSignedIn","A","playerPositions","GL","currentGroup","getSeasonAndWeek","seasonAndWeek","currentSeason","currentWeek","BrowserRouter","Route","exact","path","render","SignIn","SignUp","PasswordReset","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.69c5df69.chunk.js","sourcesContent":["import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/auth';\nrequire(`dotenv`).config();\n\nconst config = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n\n        this.auth = app.auth();\n    }\n\n    doCreateUserWithEmailAndPassword = (email, password) => {\n        return this.auth.createUserWithEmailAndPassword(email, password);\n    };\n\n    doSignInWithEmailAndPassword = (email, password) => {\n        return this.auth.signInWithEmailAndPassword(email, password);\n    };\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => { return this.auth.sendPasswordResetEmail(email) };\n\n    doPasswordUpdate = password => {\n        const user = app.auth().currentUser;\n        return user.updatePassword(password);\n    };\n};\n\nexport default Firebase;","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport * as Routes from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    if (!condition(authUser)) {\n                        this.props.history.push(Routes.signin);\n                    }\n                }\n            );\n        };\n\n        componentWillUnmount() {\n            this.listener();\n        };\n\n        render() {\n            return (\n                <Component {...this.props} />\n            );\n        };\n    };\n\n    return compose(withRouter, withFirebase)(WithAuthorization);\n};\n\nexport default withAuthorization;","export const home = '/';\nexport const signup = '/signup';\nexport const signin = '/signin';\nexport const userProfile = '/userprofile';\nexport const passwordReset = '/passwordreset';\nexport const passwordChange = '/passwordchange';\nexport const createGroup = '/creategroup';\nexport const discussion = '/discussion';\nexport const roster = '/roster/:groupId/:userId';\nexport const adminPanel = '/adminPanel/';\nexport const usedPlayers = '/usedPlayers/:userId';\nexport const seasonLongScore = '/seasonLongScore/:userId';\nexport const CreateAllGroup = '/createAllGroup';\n\n\n//These are hidden routes. Ones that have no link but anyone can go to them if they'd like\nexport const upgradeToAdmin = '/upgradeToAdmin/';","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from './Firebase';\nimport * as Routes from '../constants/routes';\nimport { withAuthorization } from './Session';\nimport { Button } from 'reactstrap';\n\nconst inputStyle = {\n    width: '50%',\n    height: '40px'\n}\n\nconst PasswordResetPage = () => (\n    <div>\n        {/* TODO This totally doesn't work */}\n        <h3>Password Reset</h3>\n        <br />\n        <PasswordResetForm />\n    </div>\n);\n\nconst initialState = {\n    email: '',\n    error: null,\n};\n\nclass PasswordResetFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...initialState };\n    }\n\n    onSubmit = event => {\n        const { email } = this.state;\n\n        this.props.firebase\n            .doPasswordReset(email)\n            .then(() => {\n                this.setState({ ...initialState });\n                this.props.history.push(Routes.home);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, error } = this.state;\n\n        const isInvalid = email === '';\n\n        return (\n            <form className='form-horizontal'\n                onSubmit={this.onSubmit}>\n                {error && <p>{error.message}</p>}\n                <div className='form-group'>\n                    <input\n                        className='form-input'\n                        style={inputStyle}\n                        name='email'\n                        value={this.state.email}\n                        onChange={this.onChange}\n                        type='text'\n                        placeholder='Email Address'\n                    />\n                </div>\n                <div className=\"form-group \">\n                    <div className=\"col-7\"></div>\n                    <button\n                        className=\"btn btn-primary col-1 col-mr-auto\"\n                        disabled={isInvalid}\n                        type=\"submit\">Reset Password</button>\n                </div>\n\n            </form>\n        );\n    }\n}\n\nconst PasswordResetLink = () => (\n    <Link to={Routes.passwordReset}><Button color='success'>Forgot Password?</Button></Link>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(PasswordResetPage);\n\nconst PasswordResetForm = compose(withRouter, withFirebase)(PasswordResetFormBase);\n\nexport { PasswordResetForm, PasswordResetLink };","import React, { Component } from 'react';\n\n\nclass WelcomeMessage extends Component {\n\n    render() {\n        return (\n            <p>\n                Welcome\n            </p>\n        )\n    }\n};\n\nexport default WelcomeMessage;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { SignUpLink } from './SignUp';\nimport { PasswordResetLink } from './PasswordReset'\nimport { withFirebase } from './Firebase';\nimport * as Routes from '../constants/routes';\nimport { Row, Col, Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport WelcomeMessage from './WelcomeMessage';\n\nconst inputStyle = {\n    width: '75%',\n    height: '40px',\n    fontSize: '16px'\n};\n\nconst labelStyle = {\n    marginBottom: '0px',\n};\n\nconst formStyle = {\n    display: 'block',\n    marginLeft: '30px',\n    marginRight: 'auto',\n    fontSize: '20px'\n};\n\nconst initialState = {\n    email: '',\n    password: '',\n    error: null\n};\n\nconst SignInPage = () => (\n    <div style={formStyle}>\n        <Row>\n            <Col xs='1' />\n            <Col xs='5'>\n                <WelcomeMessage />\n            </Col>\n            <Col xs='5'>\n                <br />\n                <h3>Sign In</h3>\n                <SignInForm />\n                <SignUpLink />\n            </Col>\n            <Col xs='1' />\n        </Row>\n    </div>\n);\n\n\nclass SignInFormBase extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { ...initialState };\n    };\n\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    };\n\n    handleSubmit = event => {\n        event.preventDefault()\n\n        const { email, password } = this.state;\n\n        this.props.firebase\n            .doSignInWithEmailAndPassword(email, password)\n            .then(async () => {\n                this.setState({ ...initialState });\n                this.props.history.push(Routes.home);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n    };\n\n    render() {\n        const { email, password, error } = this.state;\n\n        const isInvalid = password === '' || email === '';\n\n        return (\n            <div >\n                <br />\n                {/* If there's an error with sign in then display the error */}\n                {error && <p>{error.message}</p>}\n\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label style={labelStyle} >\n                            Email:\n                        </Label>\n                        <Input\n                            style={inputStyle}\n                            type='text'\n                            name='email'\n                            placeholder='email'\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label style={labelStyle}>\n                            Password:\n                        </Label>\n                        <Input\n                            style={inputStyle}\n                            placeholder='password'\n                            type='password'\n                            name='password'\n                            value={this.state.password}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button\n                            color='primary'\n                            size='lg'\n                            disabled={isInvalid}\n                            type='submit'>\n                            Sign In\n                        </Button>\n                    </FormGroup>\n                </Form>\n                <PasswordResetLink />\n            </div >\n        );\n    };\n};\n\nconst SignInForm = compose(withRouter, withFirebase)(SignInFormBase);\n\nconst SignInLink = () => (\n    <p style={{ fontSize: '16px' }}>\n        Already have an account?\n        <Link to={Routes.signin}>\n            <Button color='success'>\n                Sign In\n            </Button>\n        </Link>\n    </p>\n);\n\nexport default SignInPage;\n\nexport { SignInForm, SignInLink };","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { withFirebase } from './Firebase';\nimport { compose } from 'recompose';\nimport axios from 'axios';\nimport { Row, Col, Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport * as Routes from '../constants/routes';\nimport { SignInLink } from './SignIn';\nimport WelcomeMessage from './WelcomeMessage';\n\nconst inputStyle = {\n    width: '50%',\n    height: '40px',\n    fontSize: '16px'\n};\n\nconst labelStyle = {\n    marginBottom: '0px',\n    fontSize: '18px'\n};\n\nconst form = {\n    display: 'block',\n    marginLeft: '50px',\n    marginRight: 'auto',\n};\n\nconst labelDescription = {\n    fontSize: '14px'\n};\n\nconst initialState = {\n    username: '',\n    password: '',\n    confirmPassword: '',\n    email: '',\n    redirectTo: null,\n    error: null,\n    emailValid: false,\n    passwordValid: false,\n    usernameValid: false,\n    validMessage: []\n}\n\nconst SignUpPage = () => (\n    < div style={form} >\n        <Row>\n            <Col xs='1' />\n            <Col xs='5'>\n                <WelcomeMessage />\n            </Col>\n            <Col xs='5'>\n                <br />\n                <h3>SignUp</h3>\n                <SignUpForm />\n                <SignInLink />\n\n            </Col>\n            <Col xs='1' />\n        </Row>\n    </div>\n);\n\n\nclass SignUpFormBase extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { ...initialState };\n    }\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        //Checks if all the input fields are valid\n        //If not the validation messages are shown and no user is sent to sign up\n        if (this.checkValidInput()) {\n            const { username, email, password } = this.state;\n\n            const dbResponse = await axios.post(`/api/newUser`, { username, email });\n\n            if (dbResponse.status === 200) {\n                return this.props.firebase\n                    .doCreateUserWithEmailAndPassword(email, password)\n                    .then(authUser => {\n                        //The User has been successfully authenticated, clear this component state and redirect them to the home page\n                        this.setState({ ...initialState });\n                        this.props.history.push(Routes.home);\n                    })\n                    .catch(error => {\n                        console.log(error)\n                        this.setState({ error });\n                    });\n            };\n        };\n    };\n\n    handleChange = event => {\n        //Breaking this out due to the input validation\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({ [event.target.name]: event.target.value },\n            () => this.validateForm(name, value));\n\n    };\n\n    checkValidInput = () => {\n        let invalidInputs = 0;\n        let invalidMessages = [];\n        if (!this.state.emailValid) {\n            invalidInputs++;\n            invalidMessages.push(`Email entered is invalid`);\n        };\n        if (!this.state.usernameValid) {\n            invalidInputs++;\n            invalidMessages.push(`Please ensure username is at least 3 characters, no more than 16 and only contains letters, numbers, underscores and dashes`);\n        };\n        if (!this.state.passwordValid) {\n            invalidInputs++;\n            invalidMessages.push(`Password must be at least 6 characters in length and contain no spaces`)\n        };\n        if (invalidInputs > 0) {\n            this.setState({ validMessage: invalidMessages });\n            return false;\n        } else {\n            return true;\n        };\n    };\n\n    validateForm = (fieldName, value) => {\n        let validCheck;\n\n        switch (fieldName) {\n            case `email`:\n                let checkEmail = value.match(/^(([^<>()\\]\\\\.,;:\\s@']+(\\.[^<>()\\]\\\\.,;:\\s@']+)*)|('.+'))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n                validCheck = checkEmail ? true : false;\n                this.setState({ emailValid: validCheck });\n                break;\n            case `password`:\n                let checkPassword = value.length >= 6;\n                let noSpacesInPassword = value.match(/^\\S*$/);\n                validCheck = checkPassword && noSpacesInPassword ? true : false;\n                this.setState({ passwordValid: validCheck });\n                break;\n            case `username`:\n                let checkUsername = value.match(/^([a-z0-9-_])+$/i);\n                let usernameLength = value.length >= 3 && value.length <= 16;\n                validCheck = checkUsername && usernameLength ? true : false;\n                this.setState({ usernameValid: validCheck });\n                break;\n            default:\n                break;\n        };\n    };\n\n    dummyData = () => {\n        this.setState({ username: `testing`, password: `123456`, confirmPassword: `123456`, email: `testing@gmail.com` }, () => {\n            this.validateForm(`email`, this.state.email);\n            this.validateForm(`username`, this.state.username);\n            this.validateForm(`password`, this.state.password);\n        });\n    };\n\n    render() {\n        const { username, email, password, confirmPassword, error, validMessage } = this.state;\n\n        const isValid =\n            password === confirmPassword &&\n            password !== '' &&\n            email !== '' &&\n            username.length > 3 &&\n            password > 6;\n\n        return (\n            <div className='SignupForm'>\n                <br />\n                {/* If there's an error with signup then display the error */}\n                {error && <p>{error.message}</p>}\n\n                {/* This is for checking if any of the inputs were invalid */}\n                {validMessage && validMessage.map((message, i) => <p key={i}>{message}</p>)}\n\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label style={labelStyle}>\n                            Email\n                        </Label>\n                        <Input\n                            style={inputStyle}\n                            type='text'\n                            id='email'\n                            name='email'\n                            placeholder='ex. janedoe@email.com'\n                            value={this.state.email}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label style={labelStyle}>\n                            Username\n                            <br />\n                        </Label>\n                        <div style={labelDescription}>\n                            <strong>\n                                (Must be between 3 & 16 characters, no special characters & no spaces)\n                            </strong>\n                        </div>\n                        <Input\n                            style={inputStyle}\n                            placeholder='ex. JaneDoe14'\n                            type='username'\n                            name='username'\n                            value={this.state.username}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label style={labelStyle}>\n                            Password\n                                <br />\n                        </Label>\n                        <div style={labelDescription}>\n                            <strong>\n                                (Must be at least 6 characters with no spaces)\n                            </strong>\n                        </div>\n                        <Input\n                            style={inputStyle}\n                            placeholder='Password'\n                            type='password'\n                            name='password'\n                            value={this.state.password}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label style={labelStyle}>\n                            Confirm Password\n                        </Label>\n                        <Input\n                            style={inputStyle}\n                            placeholder='Confirm Password'\n                            type='password'\n                            name='confirmPassword'\n                            value={this.state.confirmPassword}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Button color='primary' size='lg' disabled={!isValid} type='submit'>\n                            Sign Up\n                        </Button>\n                    </FormGroup>\n                </Form>\n                <Button color='info' onClick={this.dummyData} size='lg' type='submit'>\n                    Dummy Data\n                </Button>\n            </div >\n        )\n    };\n}\n\nconst SignUpForm = compose(withRouter, withFirebase)(SignUpFormBase);\n\n\nconst SignUpLink = () => (\n    <p style={{ fontSize: '16px' }}>\n        Don't have an account?\n        <Link to={Routes.signup}>\n            <Button color='success'>\n                Sign Up\n            </Button>\n        </Link>\n    </p>\n);\n\nexport default SignUpPage;\n\nexport { SignUpForm, SignUpLink };","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { withFirebase } from './Firebase';\n\nconst textStyle = {\n  fontSize: '25px',\n  color: 'white',\n  textDecoration: 'none',\n}\n\nconst SignOutButton = ({ firebase }) => (\n  <Button style={textStyle} color='link' onClick={firebase.doSignOut}>\n    Sign Out\n  </Button>\n);\n\nexport default withFirebase(SignOutButton);","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nimport './usedPlayerStyle.css';\n\nclass UsedPlayerButton extends Component {\n\n    redirect = () => {\n        const redirectValue = '/usedPlayers/' + this.props.userId;\n\n        this.props.history.push(redirectValue);\n    };\n\n\n    render() {\n        return (\n            <div className='userPlayerButton'>\n                <Button color='info' onClick={this.redirect}>\n                    View {this.props.username}'s Used Players\n                </Button>\n            </div>\n        );\n    };\n};\n\nexport default withRouter(UsedPlayerButton);","import React from 'react';\nimport { Label, Input, Button } from 'reactstrap';\n\n\nconst WeekSearch = (props) => (\n    <div className='selectContainer'>\n        <div className='secondRowInput'>\n            <Input value={props.weekSelect} type='select' name='weekSelect' id='weekSelect' className='searchDropdown' onChange={props.handleChange}>\n                <option>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n                <option>6</option>\n                <option>7</option>\n                <option>8</option>\n                <option>9</option>\n                <option>10</option>\n                <option>11</option>\n                <option>12</option>\n                <option>13</option>\n                <option>14</option>\n                <option>15</option>\n                <option>16</option>\n                <option>17</option>\n            </Input>\n        </div>\n        <Button color='primary' onClick={props.customSeasonWeekSearch} className='submitButton'>\n            Search\n    </Button>\n    </div>\n);\n\nconst TeamSearch = (props) => (\n    <div className='selectContainer'>\n        <Label for='teamSelect'>\n            Search For Players By Team\n        </Label>\n        <div className='inputContainer secondRowInput'>\n            <Input value={props.teamSelect} type='select' name='teamSelect' id='teamSelect' className='searchDropdown' onChange={props.handleChange}>\n                <option>ARI</option>\n                <option>ATL</option>\n                <option>BAL</option>\n                <option>BUF</option>\n                <option>CAR</option>\n                <option>CHI</option>\n                <option>CIN</option>\n                <option>CLE</option>\n                <option>DAL</option>\n                <option>DEN</option>\n                <option>DET</option>\n                <option>GB</option>\n                <option>HOU</option>\n                <option>IND</option>\n                <option>JAX</option>\n                <option>KC</option>\n                <option>LAC</option>\n                <option>LA</option>\n                <option>MIA</option>\n                <option>MIN</option>\n                <option>NE</option>\n                <option>NO</option>\n                <option>NYG</option>\n                <option>NYJ</option>\n                <option>OAK</option>\n                <option>PHI</option>\n                <option>PIT</option>\n                <option>SEA</option>\n                <option>SF</option>\n                <option>TB</option>\n                <option>TEN</option>\n                <option>WAS</option>\n            </Input>\n        </div>\n        <Button color=\"primary\" onClick={props.searchByTeam} className='submitButton'>\n            Search\n        </Button>\n    </div>\n);\n\nconst PositionSearch = (props) => (\n    <div className='selectContainer'>\n        <Label for='positionSelect'>Search Available Players By Position</Label>\n        <div className='secondRowInput'>\n            <Input value={props.positionSelect} type='select' name='positionSelect' id='positionSelect' className='searchDropdown' onChange={props.handleChange}>\n                <option>QB</option>\n                <option>RB</option>\n                <option>WR</option>\n                <option>TE</option>\n                <option>K</option>\n            </Input>\n        </div>\n        <Button color='primary' onClick={props.positionSearch} className='submitButton'>\n            Search\n    </Button>\n    </div>\n);\n\n\nexport { PositionSearch, TeamSearch, WeekSearch };","import React, { Component, Fragment } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\nimport { Container, Button, Row, Col, Label } from 'reactstrap';\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport './rosterStyle.css';\nimport './playerStyle.css';\n\nimport UsedPlayerButton from '../UsedPlayers/UsedPlayerButton';\nimport { WeekSearch, PositionSearch, TeamSearch } from './SearchDropdowns';\n\nconst Alert = withReactContent(Swal);\n\nclass Roster extends Component {\n    constructor(props) {\n        super(props);\n        //Must set state hard here to ensure that it is loaded properly when the component unmounts and remounts±\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            userRoster: [],\n            availablePlayers: [],\n            positionSelect: `QB`, //This is the default value for the position search\n            teamSelect: `ARI`,\n            weekSelect: 0,\n            seasonSelect: 0,\n            weekOnPage: 0, //The week and season are here when the player searches for their roster. This updates ONLY when the player actually refreshes their roster\n            seasonOnPage: ``,\n            currentUser: false,\n            usernameOfPage: '',\n            groupPositions: [],\n        };\n    };\n\n    componentDidMount() {\n        if (this.props.week !== 0 && this.props.season !== '') {\n            this.setState({ weekSelect: this.props.week, seasonSelect: this.props.season });\n            this.getRosterData(this.props.week, this.props.season);\n            this.checkCurrentUser();\n            this.getCurrentUsername();\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.season !== prevProps.season) { // season here because it's the last prop we pass in. Probably not the best way\n            this.setState({ weekSelect: this.props.week, seasonSelect: this.props.season });\n            this.getRosterData(this.props.week, this.props.season);\n            this.checkCurrentUser();\n            this.getCurrentUsername();\n        };\n    };\n\n    getCurrentUsername() {\n        axios.get(`/api/getUserById/${this.props.match.params.userId}`)\n            .then(res => {\n                this.setState({ usernameOfPage: res.data.UN })\n            }).catch(err => {\n                console.log(err); //TODO better error handling\n            });\n    };\n\n    checkCurrentUser() {\n        if (this.props.userId === this.props.match.params.userId) {\n            this.setState({ currentUser: true });\n        } else {\n            this.setState({ currentUser: false });\n        };\n    };\n\n    //We define loading and done loading here to have swal pop ups whenever we are pulling in data so the user can't mess with data while it's in a loading state\n    loading() {\n        Alert.fire({\n            title: 'Loading',\n            text: 'Loading available players',\n            imageUrl: 'https://media.giphy.com/media/3o7aDczpCChShEG27S/giphy.gif',\n            imageWidth: 200,\n            imageHeight: 200,\n            imageAlt: 'Loading Football',\n            showConfirmButton: false,\n            showCancelButton: false\n        });\n    };\n\n    doneLoading() {\n        Alert.close()\n    };\n\n    clearPlayers = () => {\n        //Gets rid of all the players that are sitting in state when the user goes to another week\n        this.setState({ userRoster: [] });\n    };\n\n    getRosterData = (week, season) => {\n\n        this.setState({ weekOnPage: week, seasonOnPage: season })\n        //We want to go and grab the roster no matter what\n        //This is in case another user comes to the profile and wants to view their picks\n        //We pass in a params along with the API call stating if this is the current user or not\n        if (this.props.week !== 0 && this.props.season !== ``) {\n            //Inside here after the current roster is hit, then go in and pull the other data\n            //Make the pull available players easily hit from other places as well, since I want a dropdown that defaults to this week\n            //But can be changed in case people want to update more than just this week at once.\n            this.loading();\n            axios.get(`/api/userRoster/${this.props.match.params.groupId}/${this.props.match.params.userId}`,\n                { params: { week, season } })\n                .then(res => {\n                    this.setState({ userRoster: res.data.userRoster, groupPositions: res.data.groupPositions });\n                    this.doneLoading();\n                }).catch(err => {\n                    console.log(`roster data error`, err); //TODO better error handling\n                });\n        };\n    };\n\n    countLogic = (roster) => {\n        let QBCount = 0;\n        let RBCount = 0;\n        let WRCount = 0;\n        let TECount = 0;\n        let KCount = 0;\n\n        //We then go through the current user roster and populate it with data to sort it and get all the players\n        for (let i = 0; i < roster.length; i++) {\n            const position = roster[i].P;\n            //For the RB And WR positions, there are three options each they can be in\n            //RB/WR 1 & 2 as well as a flex position. All of which are undefined because we cannot have duplicate keys in an object\n            //We use a switch statement for WR and RB and start pulling the data into the fake roster\n            if (position === `RB`) {\n                RBCount++;\n            } else if (position === `WR`) {\n                WRCount++;\n            } else if (position === `QB`) {\n                QBCount++;\n            } else if (position === `TE`) {\n                TECount++;\n            } else if (position === `K`) {\n                KCount++;\n            };\n        };\n        return { QBCount, RBCount, WRCount, TECount, KCount }\n    };\n\n    //This is to check if the player has too many of a certain position on their roster\n    countRoster = (originalRoster, updatedRoster, originalAvailablePlayers, addedPlayer) => {\n        const { QBCount, RBCount, WRCount, TECount, KCount } = this.countLogic(updatedRoster)\n\n        //Checks if any positions have too many on the roster then feed the data into the function to handle this\n        //Probably a bettwe way to do this, but unsure of how.\n        //Also need to feed in the originalRoster in case the player cancels out and we are to reload the original state\n        if (QBCount > 1) {\n            this.tooManyPlayers(originalRoster, updatedRoster, `QB`, originalAvailablePlayers, addedPlayer);\n            return false; //Return false here because we are splitting and handling this with the tooManyPlayers and no longer need to save it in the onDragEnd\n        } else if (WRCount > 3) {\n            this.tooManyPlayers(originalRoster, updatedRoster, `WR`, originalAvailablePlayers, addedPlayer);\n            return false;\n        } else if (RBCount > 3) {\n            this.tooManyPlayers(originalRoster, updatedRoster, `RB`, originalAvailablePlayers, addedPlayer);\n            return false;\n        } else if (RBCount + WRCount > 5) {\n            //Here we want the WR or RB to be over three. If they already have 3 on their roster, it means that one is already in their flex\n            //If they only have two then they can sub one of the other positions and put it in their flex\n            this.tooManyPlayers(originalRoster, updatedRoster, `Flex`, originalAvailablePlayers, addedPlayer);\n            return false;\n        } else if (TECount > 1) {\n            this.tooManyPlayers(originalRoster, updatedRoster, `TE`, originalAvailablePlayers, addedPlayer);\n            return false;\n        } else if (KCount > 1) {\n            this.tooManyPlayers(originalRoster, updatedRoster, `K`, originalAvailablePlayers, addedPlayer);\n            return false;\n        };\n        return true;\n    };\n\n    tooManyPlayers = async (originalRoster, roster, position, originalAvailablePlayers, addedPlayer) => {\n        let filteredRoster = [];\n        if (position === `Flex`) {\n            filteredRoster = roster.filter(player => player.P === `RB` || player.P === `WR`);\n        } else {\n            filteredRoster = roster.filter(player => player.P === position);\n        };\n\n        //Iterate over the filtered array and get the full data for the players to give the user a choice\n        //We need it in this format so swal will properly list the options\n        const fullPlayers = {};\n\n        for (let i = 0; i < filteredRoster.length; i++) {\n            //First we have to initialize the object because of the bracket notation\n            fullPlayers[filteredRoster[i].M] = ``;\n            //THen we populate the full name from the state to give the player the chance to pick between the one they just added and the player on their roster\n            fullPlayers[filteredRoster[i].M] = filteredRoster[i].N;\n        };\n\n        //chosenPlayer === the player the user would like to be dropped\n        const { value: chosenPlayer } = await Alert.fire({\n            title: `Too many ${position}s`,\n            input: `select`,\n            inputPlaceholder: `Which player do you want to drop?`,\n            inputOptions: fullPlayers,\n            showCancelButton: true,\n        });\n\n        if (+chosenPlayer === +addedPlayer.M) {\n            this.setState({ userRoster: originalRoster });\n            return;\n        };\n\n        //If the player responded with the player they would like to drop then we will take them out of their current array and then set the new state\n        if (chosenPlayer) {\n            const intChosenPlayer = parseInt(chosenPlayer);\n            const intAddedPlayer = parseInt(addedPlayer.M);\n\n            const availablePlayers = originalAvailablePlayers.slice(0);\n            let droppedPlayerIndex = 0;\n            let availDroppedPlayerIndex = -1;\n\n            const droppedPlayer = roster.find((player, i) => {\n                if (player.M === intChosenPlayer) {\n                    droppedPlayerIndex = i;\n                    return player;\n                };\n            });\n            availablePlayers.find((player, i) => {\n                if (player.M === intAddedPlayer) {\n                    availDroppedPlayerIndex = i;\n                };\n            });\n\n            //Remove the player they chose from the array and then save it down into state\n            if (availDroppedPlayerIndex >= 0) {\n                availablePlayers.splice(availDroppedPlayerIndex, 1);\n            };\n            if (position === `Flex`) {\n                const { RBCount, WRCount } = this.countLogic(originalRoster);\n                if (RBCount === 3) {\n                    if (addedPlayer.P === `RB`) {\n                        roster[droppedPlayerIndex] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                        roster.pop();\n                    } else {\n                        if (droppedPlayerIndex === 5) {\n                            roster[droppedPlayerIndex] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                            roster.pop();\n                        } else {\n                            roster[droppedPlayerIndex] = { P: roster[5].P, M: roster[5].M, N: roster[5].N, T: roster[5].T };\n                            roster[5] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                            roster.pop();\n                        };\n                    };\n                } else if (WRCount === 3) {\n                    if (addedPlayer.P === `WR`) {\n                        roster[droppedPlayerIndex] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                    } else {\n                        if (droppedPlayerIndex === 5) {\n                            roster[droppedPlayerIndex] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                            roster.pop();\n                        } else {\n                            roster[droppedPlayerIndex] = { P: roster[5].P, M: roster[5].M, N: roster[5].N, T: roster[5].T };\n                            roster[5] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                            roster.pop();\n                        };\n                    };\n                };\n            } else {\n                roster[droppedPlayerIndex] = { P: addedPlayer.P, M: addedPlayer.M, N: addedPlayer.N, T: addedPlayer.T };\n                roster.pop();\n            };\n\n            //Add the player they dropped back to the available list of players\n            if (droppedPlayer.P === this.state.positionSelect) {\n                availablePlayers.unshift(droppedPlayer);\n            };\n\n            //Now we make one final check before moving things along. If everything is done right above this should be simple.\n            const checkRoster = this.checkRoster(roster);\n\n            //If the check failed, then we will have an issue and are going to revert the state back to the previous point\n            if (checkRoster) {\n                //We take the array of player IDs that are on the user roster and sort them\n                this.setState({ userRoster: roster });\n\n                //We need to new array to get the new player added and the old player so we can pull them out of the usedPlayersArray in the DB\n                this.saveRosterToDb(roster, chosenPlayer, intAddedPlayer, false);\n\n                this.setState({ availablePlayers: availablePlayers });\n            } else {\n                Alert.fire({\n                    type: 'warning',\n                    title: 'Roster Save Error!',\n                    text: 'Something went wrong with saving your roster! Please refresh and try again',\n                    confirmButtonColor: '#3085d6',\n                    confirmButtonText: 'Take me back'\n                });\n                this.setState({ userRoster: originalRoster });\n            };\n        } else if (chosenPlayer === undefined) {\n            //This is if the player has chosen to cancel out of the box above. We reload the old state to remove the player they just added\n            this.setState({ userRoster: originalRoster, availablePlayers: originalAvailablePlayers });\n        } else {\n            //This is if the player doesn't select one of the players and just presses accept\n            await Alert.fire(`You must pick one or cancel`)\n            this.tooManyPlayers(originalRoster, roster, position, originalAvailablePlayers);\n        };\n    };\n\n    checkRoster = (roster) => {\n        //This is a true false check to verify the roster data before saving it to the database\n        let response = true;\n        let QBCount = 0;\n        let RBCount = 0;\n        let WRCount = 0;\n        let TECount = 0;\n        let KCount = 0;\n\n        //We then go through the current user roster and populate it with data to sort it and get all the players\n        for (let i = 0; i < roster.length; i++) {\n            const position = roster[i].P;\n            //For the RB And WR positions, there are three options each they can be in\n            //RB/WR 1 & 2 as well as a flex position. All of which are undefined because we cannot have duplicate keys in an object\n            //We use a switch statement for WR and RB and start pulling the data into the fake roster\n            if (position === `RB`) {\n                RBCount++;\n            } else if (position === `WR`) {\n                WRCount++;\n            } else if (position === `QB`) {\n                QBCount++;\n            } else if (position === `TE`) {\n                TECount++;\n            } else if (position === `K`) {\n                KCount++;\n            };\n        };\n\n        //This checks if the player has too many of any one position or if their overall roster is over 8\n        if (QBCount > 1 || RBCount > 3 || WRCount > 3 || (RBCount + WRCount) > 5 || TECount > 1 || KCount > 1 || roster.length > 8) {\n            response = false;\n        };\n\n        return response;\n    };\n\n    saveRosterToDb = async (roster, droppedPlayer, addedPlayer, saveWithNoDrop) => {\n        this.loading()\n        axios.put(`/api/updateUserRoster`,\n            { userId: this.props.userId, roster, droppedPlayer, addedPlayer, week: this.state.weekSelect, season: this.state.seasonSelect, saveWithNoDrop, groupId: this.props.match.params.groupId })\n            .then(res => {\n                this.doneLoading();\n                this.setState({ userRoster: res.data })\n                return;\n            }).catch(err => {\n                console.log(err)//TODO Better error handling\n            });\n    };\n\n    checkLockPeriod = async () => {\n        const response = await axios.get(`/api/checkLockPeriod`);\n        //If this week is already passed the lock date then return bad request\n        if (response.data.LW === 0) {\n            return true;\n        };\n\n        if (this.state.weekOnPage <= response.data.LW) {\n            return false;\n        };\n\n        //If the week and the season are not locked then we can return true, that the week they are trying to edit is not locked\n        return true;\n    };\n\n    //This triggers off the Form on the roster below that allows the user to search for the position they would like to add to their roster\n    positionSearch = (e) => {\n        e.preventDefault();\n\n        this.loading();\n        const userId = this.props.userId;\n        axios.get(`/api/availablePlayers`,\n            { params: { userId, searchedPosition: this.state.positionSelect, season: this.state.seasonSelect, groupId: this.props.match.params.groupId } })\n            .then(res => {\n                this.setState({ availablePlayers: res.data });\n                this.doneLoading();\n            });\n    };\n\n    customSeasonWeekSearch = (e) => {\n        e.preventDefault();\n\n        //Need to clear the playerIds when switching weeks. If not the program makes the array an array of undefined\n        const userRoster = [];\n\n        this.setState({ userRoster })\n\n        this.getRosterData(this.state.weekSelect, this.state.seasonSelect);\n    };\n\n    searchByTeam = (e) => {\n        e.preventDefault();\n\n        this.loading();\n\n        axios.get(`/api/getPlayersByTeam/${this.props.match.params.groupId}/${this.props.userId}/${this.state.teamSelect}/${this.props.season}`)\n            .then(res => {\n                this.setState({ availablePlayers: res.data });\n                this.doneLoading();\n                return;\n            });\n    };\n\n    //This is to handle the change for the Input Type in the position search below\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    addPlayerToRoster = (newRoster, addedPlayer) => {\n        const sortedUpdatedRoster = newRoster\n        const addedPosition = addedPlayer.P;\n        if (addedPosition === `RB`) {\n            if (sortedUpdatedRoster[1] === 0) {\n                sortedUpdatedRoster[1] = addedPlayer;\n            } else if (sortedUpdatedRoster[2] === 0) {\n                sortedUpdatedRoster[2] = addedPlayer;\n            } else if (sortedUpdatedRoster[5] === 0) {\n                sortedUpdatedRoster[5] = addedPlayer;\n            } else {\n                sortedUpdatedRoster.push(addedPlayer);\n            };\n        } else if (addedPosition === `WR`) {\n            if (sortedUpdatedRoster[3] === 0) {\n                sortedUpdatedRoster[3] = addedPlayer;\n            } else if (sortedUpdatedRoster[4] === 0) {\n                sortedUpdatedRoster[4] = addedPlayer;\n            } else if (sortedUpdatedRoster[5] === 0) {\n                sortedUpdatedRoster[5] = addedPlayer;\n            } else {\n                sortedUpdatedRoster.push(addedPlayer);\n            };\n        } else if (addedPosition === `QB`) {\n            if (sortedUpdatedRoster[0] === 0) {\n                sortedUpdatedRoster[0] = addedPlayer;\n            } else {\n                sortedUpdatedRoster.push(addedPlayer);\n            };\n        } else if (addedPosition === `TE`) {\n            if (sortedUpdatedRoster[6] === 0) {\n                sortedUpdatedRoster[6] = addedPlayer;\n            } else {\n                sortedUpdatedRoster.push(addedPlayer);\n            };\n        } else if (addedPosition === `K`) {\n            if (sortedUpdatedRoster[7] === 0) {\n                sortedUpdatedRoster[7] = addedPlayer;\n            } else {\n                sortedUpdatedRoster.push(addedPlayer);\n            };\n        };\n\n        return sortedUpdatedRoster;\n    }\n\n    addDropPlayer = async (mySportsId, addOrDrop) => {\n        //First check if the user is on a differnent page and if the peroid is locked\n        if (!this.state.currentUser) {\n            Alert.fire({\n                title: `Not your roster!`,\n                type: `warning`,\n            });\n            return;\n        };\n        const isLocked = await this.checkLockPeriod();\n        if (!isLocked) {\n            Alert.fire({\n                title: `Peroid is locked!`,\n                type: `warning`,\n                text: `Week ${this.state.weekOnPage} is locked. Please search a different week`,\n            });\n            return;\n        };\n\n        const newAvailablePlayers = this.state.availablePlayers.slice(0);\n        let newRoster = this.state.userRoster.slice(0);\n\n        //First I need to copy the state as is\n        //Then find the player the user wants to add or drop\n        //Then if they are dropping just add the player to the available player list\n        if (addOrDrop === `add`) {\n            let addedPlayerIndex = 0;\n\n            const addedPlayer = newAvailablePlayers.find((player, i) => {\n                if (player.M === mySportsId) {\n                    addedPlayerIndex = i;\n                    return player;\n                };\n            });\n\n            newAvailablePlayers.splice(addedPlayerIndex, 1);\n            newRoster = this.addPlayerToRoster(newRoster, addedPlayer)\n\n            //Need to save tunnels over to the tooManyPlayers function which then saves so we don't need to worry about it\n            const needToSave = this.countRoster(this.state.userRoster, newRoster, this.state.availablePlayers, addedPlayer);\n            const correctRoster = this.checkRoster(newRoster);\n\n            //We use this is the player has less than a complete roster\n            if (correctRoster && needToSave) {\n                this.setState({ availablePlayers: newAvailablePlayers });\n                //Is a 0 here because if they added a player earlier to the DB that would have already been picked up by countRoster\n                //The true is to indicate we need to save a player down without dropping one in the usedPlayer array in the DB\n                this.saveRosterToDb(newRoster, 0, addedPlayer.M, true);\n            };\n            //TODO NEED TO DO THE DROP MECHANIC\n        } else if (addOrDrop === `drop`) {\n            let droppedPlayerIndex = 0;\n            const droppedPlayer = newRoster.find((player, i) => {\n                if (player.mySportsId === mySportsId) {\n                    droppedPlayerIndex = i;\n                    return player;\n                };\n            });\n\n            newRoster.splice(droppedPlayerIndex, 1);\n            newAvailablePlayers.unshift(droppedPlayer);\n\n            const needToSave = this.countRoster(this.state.userRoster, newRoster, this.state.availablePlayers);\n            const correctRoster = this.checkRoster(newRoster);\n\n            //We use this is the player has less than a complete roster\n            if (correctRoster && needToSave) {\n                this.setState({ availablePlayers: newAvailablePlayers });\n                //Is a 0 here because if they added a player earlier to the DB that would have already been picked up by countRoster\n                //The true is to indicate we need to save a player down without dropping one in the usedPlayer array in the DB\n                this.saveRosterToDb(this.state.dbReadyRoster, mySportsId, false);\n            };\n        };\n    };\n\n    render() {\n        return (\n            <Container fluid={true} className='lineHeight'>\n                <Row>\n                    <Col md='3' className='noMargin'>\n                        <Label for='weekSelect'>Select Week</Label>\n                        <WeekSearch weekSelect={this.state.weekSelect} handleChange={this.handleChange} customSeasonWeekSearch={this.customSeasonWeekSearch} />\n\n                        <PositionSearch positionSelect={this.state.positionSelect} handleChange={this.handleChange} positionSearch={this.positionSearch} />\n\n                        <TeamSearch handleChange={this.handleChange} searchByTeam={this.searchByTeam} teamSelect={this.state.teamSelect} />\n\n                        <UsedPlayerButton userId={this.props.match.params.userId} username={this.state.usernameOfPage} />\n                    </Col>\n\n                    <Col md='9'>\n                        <Row className='topRow'>\n                            <Col xs='12'>\n                                <div className='centerText headerFont'>\n                                    {this.state.usernameOfPage}'s Roster\n                                </div>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md='1' />\n                            <Col md='5'>\n                                <RosterDisplay\n                                    groupPositions={this.state.groupPositions}\n                                    addDropPlayer={this.addDropPlayer}\n                                    roster={this.state.userRoster || {}}\n                                    nameCol={'9'}\n                                    scoreCol={'0'} />\n                            </Col>\n                            <Col md='5'>\n                                <Row>\n                                    <Col xs='12'>\n                                        <div className='colHeader'>\n                                            Available Players\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs='12'>\n                                        {this.state.availablePlayers.map((player, i) => (\n                                            <AvailablePlayerRow player={player} key={i} addDropPlayer={this.addDropPlayer} />\n                                        ))}\n                                    </Col>\n                                </Row>\n                            </Col>\n                            <Col md='1' />\n                        </Row>\n                    </Col>\n                </Row>\n            </Container >\n        );\n    };\n};\n\nconst CurrentRosterRow = (props) => (\n    <Row className='playerRow'>\n        <Col xs='2'>\n            <div className='positionBox'>\n                {props.position}\n            </div>\n        </Col>\n        <Col xs='9'>\n            {props.player ?\n                <Row>\n                    <Col xs={props.nameCol}>\n                        <div className='player'>\n                            {props.player.N &&\n                                props.player.N + `, ` + props.player.T}\n                        </div>\n                    </Col>\n                    <Col xs={props.scoreCol}>\n                        {props.player.score &&\n                            props.player.score}\n                    </Col>\n                    {props.addDropPlayer &&\n                        <Col xs='3'>\n                            <Button className='addDropButton' color='outline-success' size='sm' onClick={() => props.addDropPlayer(props.player.M, 'drop')}>\n                                Drop\n                            </Button>\n                        </Col>\n                    }\n                </Row>\n                : ``\n            }\n        </Col>\n    </Row>\n);\n\nconst AvailablePlayerRow = (props) => (\n    <Row className='playerRow'>\n        <Col xs='8'>\n            <div className='player'>\n                {props.player && props.player.N + `, ` + props.player.T + `, ` + props.player.P}\n            </div>\n        </Col>\n        <Col xs='3'>\n            <Button className='addDropButton' color='outline-success' size='sm' onClick={() => props.addDropPlayer(props.player.M, 'add')}>\n                Add\n            </Button>\n        </Col>\n    </Row>\n);\n\nconst RosterDisplay = (props) => (\n    <Fragment>\n        {props.groupPositions.map((position, i) => (\n            <CurrentRosterRow\n                key={i}\n                position={position.N}\n                player={props.roster[i]}\n                addDropPlayer={props.addDropPlayer}\n                nameCol={props.nameCol}\n                scoreCol={props.scoreCol} />\n        ))}\n    </Fragment>\n);\n\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(Roster);\nexport { RosterDisplay };","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport { withRouter } from 'react-router-dom';\n\nimport './leaderBoardStyle.css'\n\nclass Leaderboard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userList: [],\n            loading: false,\n        };\n    };\n\n    componentDidMount() {\n        if (typeof this.props.season !== `undefined` && this.props.season !== false) { // season here because it's the last prop we pass in. Probably not the best way\n            this.getDataForLeaderboard(this.props.week, this.props.season);\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.season !== prevProps.season) { // season here because it's the last prop we pass in. Probably not the best way\n            this.getDataForLeaderboard(this.props.week, this.props.season);\n        };\n    };\n\n    componentWillUnmount() {\n        //TODO Fix this when the user gets off the homepage before it loads, there is a memory leak because the leaderboard data still comes in\n        //https://codepen.io/dashtinejad/pen/Lxejpq\n    }\n\n    //Must break out these requests into individual functions so axios can do them async\n    getAllUsers() {\n        return axios.get(`/api/getAllUsers`);\n    };\n\n    getAllRosters(season) {\n        if (season === ``) {\n            return;\n        };\n        return axios.get(`/api/getAllRosters/${season}`);\n    };\n\n    getDataForLeaderboard = (week, season) => {\n        this.setState({ loading: true });\n\n        //Handling if this was called too early\n        if (season === ``) { return };\n        axios.get(`/api/getLeaderboard/${this.props.groupId}/${season}`)\n            .then(res => {\n                this.setState({ loading: false, userList: res.data });\n            });\n    };\n\n    redirect = (userId) => {\n        const redirectValue = '/roster/' + userId;\n\n        this.props.history.push(redirectValue);\n    };\n\n    render() {\n        const columns = [\n            { Header: `Username`, accessor: `UN`, show: true },\n            { Header: `email`, accessor: `E`, show: true },\n            { Header: `Last Week's Score`, accessor: `WS[${(this.props.week - 1).toString()}]`, show: true },\n            { Header: `Total Score`, accessor: `TS`, show: true }];\n\n        const defaultSorted = [{ id: 'totalScore', desc: true }];\n        return (\n            <div>\n                <ReactTable\n                    data={this.state.userList}\n                    columns={columns}\n                    defaultSorted={defaultSorted}\n                    loading={this.state.loading}\n                    defaultPageSize={20}\n                    className=\"-highlight textCenter\"\n\n                    //TODO Enable an on click to have a pop up to view their weekly stats\n                    getTdProps={(state, rowInfo) => {\n                        return {\n                            onClick: () => {\n                                if (!rowInfo) { return };\n                                this.props.userClicked(rowInfo.original.userId, rowInfo.original.username)\n                            }\n                        };\n                    }}\n                />\n            </div>\n        )\n    };\n};\n\nexport default withRouter(Leaderboard);\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport { withAuthorization } from '../Session';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Row, Col } from 'reactstrap';\nimport { RosterDisplay } from '../Roster';\nimport * as Routes from '../../constants/routes';\nimport { WeekSearch } from '../Roster/SearchDropdowns';\n\nimport Leaderboard from './Leaderboard';\nimport './homeStyle.css';\n\n//Stateful component to allow the grouplist to properly populate\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        //Must set state hard here to ensure that it is loaded properly when the component unmounts and remounts\n        this.leaderboardUserClicked = this.leaderboardUserClicked.bind(this);\n        this.state = {\n            userDisplayed: '',\n            userIdDisplayed: '',\n            userRoster: {},\n            weekSelect: 1,\n            groupPositions: []\n        };\n    };\n\n    componentDidMount() {\n        if (this.props.userId && this.props.week && this.props.username) {\n            this.setState({ weekSelect: this.props.week });\n            this.getRoster(this.props.userId, this.props.week, this.props.username);\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.week !== prevProps.week) {\n            this.setState({ weekSelect: this.props.week });\n            this.getRoster(this.props.userId, this.props.week, this.props.username);\n        };\n    };\n\n    leaderboardUserClicked(userId, username) {\n        this.setState({ userRoster: {} });\n        this.getRoster(userId, this.props.week, username)\n    };\n\n    getRoster(userId, week, username) {\n\n        if (week !== 0 && this.props.season !== `` && this.props.group !== {}) {\n            const { season, group } = this.props\n\n            this.setState({ weekSelect: week });\n\n            axios.get(`/api/userRoster/${group._id}/${userId}`,\n                { params: { week, season } })\n                .then(res => {\n                    this.sortRoster(res.data.userRoster);\n                    this.setState({ groupPositions: res.data.groupPositions });\n\n                    if (username) {\n                        this.setState({ userDisplayed: username, userIdDisplayed: userId });\n                    } else {\n                        this.getUserName(userId);\n                    };\n\n                }).catch(err => {\n                    console.log(`roster data error`, err); //TODO better error handling\n                });\n        };\n    };\n\n    getUserName(userId) {\n        axios.get(`/api/getUserById/${userId}`)\n            .then(res => {\n                this.setState({ userDisplayed: res.data.UN, userIdDisplayed: userId })\n            }).catch(err => {\n                console.log(err); //TODO better error handling\n            });\n    };\n\n    sortRoster = (roster) => {\n        const sortedRoster = [];\n        for (let i = 0; i < this.props.positionOrder.length - 1; i++) {\n            for (let ii = 0; ii < roster.length; ii++) {\n                if (this.props.positionOrder[i] === roster[ii].P) {\n                    sortedRoster.push(roster[ii]);\n                };\n            };\n            if (!sortedRoster[i]) {\n                sortedRoster.push({});\n            };\n        };\n\n        this.setState({ userRoster: sortedRoster });\n\n        return;\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    customSeasonWeekSearch = (e) => {\n        e.preventDefault();\n\n        //Need to clear the playerIds when switching weeks. If not the program makes the array an array of undefined\n        const userRoster = {};\n\n        this.setState({ userRoster })\n\n        this.getRoster(this.state.userIdDisplayed, this.state.weekSelect, this.state.userDisplayed);\n    };\n\n    render() {\n        const { isAdmin } = this.props;\n        const { userRoster, userDisplayed, userIdDisplayed, weekSelect, groupPositions } = this.state;\n\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <LeftPanel smCol='12' mdCol='5'\n                        roster={userRoster}\n                        groupPositions={groupPositions}\n                        addDropPlayer={null}\n                        isAdmin={isAdmin}\n                        userId={userIdDisplayed}\n                        userDisplayed={userDisplayed}\n                        weekSelect={weekSelect}\n                        customSeasonWeekSearch={this.customSeasonWeekSearch}\n                        handleChange={this.handleChange}\n                        groupId={this.props.group._id}\n                        lockperoid={this.lockperoid} />\n                    <Col sm='12' md='7'>\n                        <Leaderboard\n                            week={this.props.week}\n                            season={this.props.season}\n                            userClicked={this.leaderboardUserClicked}\n                            groupName={this.props.group.N}\n                            groupId={this.props.group._id} />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    };\n};\n\nconst HomeLink = (props) => (\n    <Link to={Routes.home}>\n        <div style={props.testStyle}>\n            Home\n        </div>\n    </Link>\n);\n\nconst LeftPanel = (props) => (\n    <Col sm={props.smCol} md={props.mdCol}>\n        {props.userDisplayed &&\n            <Row>\n                <Col xs='12'>\n                    <Row>\n                        <Col sm='12' className='centerText usernameHeader'>\n                            {props.userDisplayed}\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        }\n        <Row>\n            <Col md='12' className='centerText'>\n                <WeekSearch weekSelect={props.weekSelect} handleChange={props.handleChange} customSeasonWeekSearch={props.customSeasonWeekSearch} />\n            </Col>\n        </Row>\n        <Row>\n            <Col md='12'>\n                <RosterDisplay roster={props.roster} groupPositions={props.groupPositions} addDropPlayer={null} nameCol={'9'} scoreCol={'3'} />\n            </Col>\n        </Row>\n        <Row>\n            <Col xs='12' className='centerText userLinks'>\n                <UserLinks\n                    isAdmin={props.isAdmin}\n                    userId={props.userId}\n                    userDisplayed={props.userDisplayed}\n                    groupName={props.groupId}\n                />\n            </Col>\n        </Row>\n    </Col>\n);\n\nconst UserLinks = (props) => (\n    <Fragment>\n        {props.isAdmin &&\n            <Link to={Routes.adminPanel}>\n                <Button color='info' className='userLinkButton'>\n                    Admin Panel\n                </Button>\n            </Link>\n        }\n        <Link to={`/roster/${props.groupName}/${props.userId}`}>\n            <Button color='primary' className='userLinkButton'>\n                Go to Roster\n            </Button>\n        </Link>\n        <Link to={`/usedPlayers/${props.userId}`}>\n            <Button color='info' className='userLinkButton'>\n                Used Players\n            </Button>\n        </Link>\n        <Link to={`/seasonLongScore/${props.userId}`}>\n            <Button color='primary' className='userLinkButton'>\n                Season Long Score\n            </Button>\n        </Link>\n    </Fragment>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(Home);\nexport { HomeLink };","import React from 'react';\nimport '../App.css';\n\nimport * as Routes from '../constants/routes';\nimport SignOutButton from './SignOutButton';\nimport { HomeLink } from './Home';\n\nimport { Nav, Navbar, NavItem, NavLink } from 'reactstrap';\nimport { Row, Col } from 'reactstrap';\n\n\nconst background = {\n    backgroundColor: '#003366',\n    width: 'auto',\n    height: '100%',\n    overflow: 'hidden',\n};\n\nconst padding2 = {\n    textAlign: 'left',\n};\n\nconst navLinkStyle = {\n    fontSize: '25px',\n    color: 'white',\n    textDecoration: 'none',\n};\n\nconst textStyle = {\n    fontSize: '25px',\n    color: 'white',\n    textDecoration: 'none',\n};\n\nconst NavBar = (props) => {\n    return (\n        <div>\n            <header style={background}>\n                <div>\n                    <Row>\n                        <Col>\n                            <Navbar expand=\"md\">\n                                {props.authUser ? (<section>\n                                    <Nav navbar>\n                                        <NavItem >\n                                            <HomeLink testStyle={textStyle} />\n                                        </NavItem>\n                                        <NavItem >\n                                        </NavItem>\n                                        <NavItem>\n                                            <SignOutButton />\n                                        </NavItem>\n                                    </Nav>\n                                </section>\n                                ) : (\n                                        <section>\n                                            <Nav >\n                                                <NavItem >\n                                                    <HomeLink />\n                                                </NavItem>\n                                                <div style={padding2}>\n                                                    <NavItem>\n                                                        <NavLink style={navLinkStyle} href={Routes.signin}>Sign In </NavLink>\n                                                    </NavItem>\n                                                </div>\n                                                <NavItem>\n                                                    <NavLink style={navLinkStyle} href={Routes.signup}>Sign Up</NavLink>\n                                                </NavItem>\n                                            </Nav>\n                                        </section>\n                                    )\n                                }\n                            </Navbar>\n                        </Col>\n                    </Row>\n                </div>\n            </header>\n        </div >\n\n    )\n}\n\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { withAuthorization } from './Session';\n\nimport { withFirebase } from './Firebase';\nimport * as Routes from '../constants/routes';\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\n\nconst inputStyle = {\n    width: '35%',\n    height: '40px',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n};\n\nconst labelStyle = {\n    marginBottom: '0px',\n    fontSize: '20px'\n};\n\nconst initalState = {\n    password: '',\n    passwordConfirm: '',\n    error: null,\n    passwordValid: false,\n    validMessage: []\n};\n\nclass PasswordChangeForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...initalState };\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n\n        //Checks if the password they inputted is correct. If it isn't it will not submit\n        if (this.checkValidInput()) {\n            const { password } = this.state;\n\n            this.props.firebase\n                .doPasswordUpdate(password)\n                .then(() => {\n                    this.setState({ ...initalState });\n                    this.props.history.push(Routes.home);\n                })\n                .catch(error => {\n                    this.setState({ error });\n                });\n        }\n    };\n\n    handleChange = event => {\n        //Breaking this out due to the input validation\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({ [event.target.name]: event.target.value },\n            () => this.validateForm(name, value));\n    };\n\n    checkValidInput = () => {\n        let invalidInputs = 0;\n        let invalidMessages = [];\n        if (!this.state.passwordValid) {\n            invalidInputs++;\n            invalidMessages.push(`Password must be at least 6 characters in length and contain no spaces`)\n        };\n        if (invalidInputs > 0) {\n            this.setState({ validMessage: invalidMessages });\n            return false;\n        } else {\n            return true;\n        };\n    }\n\n    //Field name to keep validation consistant, but there's only password here\n    validateForm = (fieldName, value) => {\n        let validCheck;\n        let checkPassword = value.length >= 6;\n        let noSpacesInPassword = value.match(/^\\S*$/);\n        validCheck = checkPassword && noSpacesInPassword ? true : false;\n        this.setState({ passwordValid: validCheck });\n    }\n\n    render() {\n        const { password, passwordConfirm, error, validMessage } = this.state;\n\n        const isInvalid =\n            password !== passwordConfirm || password === '';\n\n        return (\n            <div>\n                <h3>Update Password:</h3>\n                <br />\n                {validMessage && validMessage.map((message, i) => <p key={i}>{message}</p>)}\n                <Form onSubmit={this.handleSubmit}>\n                    {error && <p>{error.message}</p>}\n                    <Label style={labelStyle} htmlFor='password'>New Password:</Label>\n                    <FormGroup>\n                        <Input\n                            style={inputStyle}\n                            name='password'\n                            value={password}\n                            onChange={this.handleChange}\n                            type='password'\n                            placeholder='New Password'\n                        />\n                    </FormGroup>\n\n                    <Label style={labelStyle} htmlFor='passwordConfirm'>Confirm Password:</Label>\n                    <FormGroup>\n                        <Input\n                            style={inputStyle}\n                            name='passwordConfirm'\n                            value={passwordConfirm}\n                            onChange={this.handleChange}\n                            type='password'\n                            placeholder='Confirm New Password'\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button\n                            color='primary'\n                            disabled={isInvalid}\n                            type='submit'>\n                            Update Password\n                            </Button>\n                    </FormGroup>\n\n                </Form>\n            </div>\n        );\n    }\n}\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(compose(withRouter, withFirebase)(PasswordChangeForm));","import React, { Component, Fragment } from 'react';\nimport { withAuthorization } from './Session';\nimport PasswordChangeForm from './PasswordChange';\nimport axios from 'axios';\nimport { Button, Label, Input, } from \"reactstrap\";\n\nconst inputStyle = {\n    width: '35%',\n    height: '40px',\n    fontSize: '16px',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginBottom: '10px'\n};\n\nconst labelStyle = {\n    marginBottom: '0px'\n};\n\nconst buttonStyle = {\n    marginBottom: '25px'\n};\n\nconst centerText = {\n    textAlign: 'center'\n};\n\nconst updateProfileStyle = {\n    fontSize: '20px'\n};\n\nconst header = {\n    marginTop: '25px',\n}\n\nconst profileDisplayStyle = {\n    fontSize: '16px'\n};\n\nconst initialUpdateState = {\n    username: '',\n    email: '',\n    firstname: '',\n    lastname: '',\n    emailValid: false,\n    usernameValid: false,\n    validMessage: ''\n};\n\nconst initialProfileState = {\n    dbUsername: '',\n    dbEmail: '',\n    dbFirstname: '',\n    dbLastname: '',\n    isCurrentUser: false\n};\n\nclass UserProfile extends Component {\n    constructor(props) {\n        super(props)\n\n        //Listed twice as to not change the info on the profile when they begin updating it\n        this.state = { ...initialProfileState };\n    };\n\n    componentDidMount() {\n        const userID = this.props.match.params.userID;\n        this.getUserData(userID);\n        this.checkCurrentUser(userID);\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.userID !== prevProps.match.params.userID || this.props.userID !== prevProps.userID) {\n            const userID = this.props.match.params.userID;\n            this.getUserData(userID);\n            this.checkCurrentUser(userID);\n        };\n    };\n\n    checkCurrentUser = (userIDFromURL) => {\n        if (this.props.userID === userIDFromURL) {\n            this.setState({\n                isCurrentUser: true\n            })\n        };\n    };\n\n    updatedProfile = () => {\n        this.getUserData(this.props.match.params.userID);\n    };\n\n    getUserData = async (userID) => {\n        const dbResponse = await axios.get(`/api/getuserbyid/${userID}`);\n        if (dbResponse.status === 200) {\n            this.setState({\n                dbUsername: dbResponse.data.local.username,\n                dbEmail: dbResponse.data.local.email,\n                dbFirstname: dbResponse.data.local.firstname,\n                dbLastname: dbResponse.data.local.lastname,\n            });\n        };\n    };\n\n    render() {\n        const { isCurrentUser, dbUsername, dbEmail, dbFirstname, dbLastname } = this.state;\n\n        return (\n            <div style={centerText}>\n                <h1 style={header}>{dbUsername}'s Profile</h1>\n                <div style={profileDisplayStyle}>Username: {dbUsername}</div>\n                <div style={profileDisplayStyle}>Email: {dbEmail}</div>\n                <div style={profileDisplayStyle}>Firstname: {dbFirstname}</div>\n                <div style={profileDisplayStyle}>Lastname: {dbLastname}</div>\n\n                {/* If the user is the current user logged in they can update their profile here */}\n                {isCurrentUser &&\n                    <Fragment>\n                        <UpdateInformationForm userID={this.props.userID} updatedProfile={this.updatedProfile} />\n                        <br />\n                        <PasswordChangeForm />\n                    </Fragment>\n                }\n            </div>\n        );\n    };\n};\n\nclass UpdateInformationForm extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { ...initialUpdateState };\n    };\n\n    handleSubmit = async (fieldSubmitted) => {\n\n        if (this.checkValidInput(fieldSubmitted)) {\n            const value = this.state[fieldSubmitted];\n            const userID = this.props.userID;\n            const request = fieldSubmitted;\n\n            const dbResponse = await axios.put(`/api/updateuser`, { userID, value, request });\n\n            if (dbResponse.status === 200) {\n                this.props.updatedProfile();\n                this.setState({ ...initialUpdateState });\n            };\n        };\n    };\n\n    handleChange = event => {\n        //Breaking this out due to the input validation\n        const name = event.target.name;\n        const value = event.target.value;\n\n        this.setState({ [event.target.name]: event.target.value },\n            () => this.validateForm(name, value));\n\n    };\n\n    validateForm = (fieldName, value) => {\n        let validCheck;\n\n        switch (fieldName) {\n            case `email`:\n                let checkEmail = value.match(/^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n                validCheck = checkEmail ? true : false;\n                this.setState({ emailValid: validCheck });\n                break;\n            case `username`:\n                let checkUsername = value.match(/^([a-z0-9-_])+$/i);\n                let usernameLength = value.length >= 3 && value.length <= 16;\n                validCheck = checkUsername && usernameLength ? true : false;\n                this.setState({ usernameValid: validCheck });\n                break;\n            default:\n                break;\n        };\n    };\n\n    checkValidInput = (fieldSubmitted) => {\n        if (fieldSubmitted === 'email' && !this.state.emailValid) {\n            this.setState({ validMessage: `Email entered is invalid` });\n            return false;\n        };\n\n        if (fieldSubmitted === 'username' && !this.state.usernameValid) {\n            this.setState({ validMessage: `Please ensure username is between 3 & 16 characters & it only contains letters, numbers, underscores & dashes` });\n            return false;\n        };\n\n        return true;\n    };\n\n    render() {\n        const { username, email, firstname, lastname, validMessage } = this.state;\n\n        const usernameIsInvalid = username === '';\n        const emailIsInvalid = email === '';\n        const firstnameIsInvalid = firstname === '';\n        const lastnameIsInvalid = lastname === '';\n\n        return (\n            <div style={updateProfileStyle}>\n                {validMessage && <p>{validMessage}</p>}\n                <br />\n                <Label style={labelStyle}>\n                    Username:\n                </Label>\n                <Input\n                    style={inputStyle}\n                    type='text'\n                    name='username'\n                    placeholder='Update Username'\n                    value={username}\n                    onChange={this.handleChange} />\n                <Button\n                    color='primary'\n                    style={buttonStyle}\n                    disabled={usernameIsInvalid}\n                    onClick={() => this.handleSubmit('username')}>\n                    Update Username\n                </Button>\n\n                <br />\n\n                <Label style={labelStyle}>\n                    Email:\n                </Label>\n                <Input\n                    style={inputStyle}\n                    type='text'\n                    name='email'\n                    placeholder='Update Email'\n                    value={email}\n                    onChange={this.handleChange} />\n                <Button\n                    color='primary'\n                    style={buttonStyle}\n                    disabled={emailIsInvalid}\n                    onClick={() => this.handleSubmit('email')}>\n                    Update Email\n                </Button>\n\n                <br />\n\n                <Label style={labelStyle}>\n                    First Name:\n                </Label>\n                <Input\n                    style={inputStyle}\n                    type='text'\n                    name='firstname'\n                    placeholder='Update Firstname'\n                    value={firstname}\n                    onChange={this.handleChange}></Input>\n                <Button\n                    color='primary'\n                    style={buttonStyle}\n                    disabled={firstnameIsInvalid}\n                    onClick={() => this.handleSubmit('firstname')}>\n                    Update Firstname\n                </Button>\n\n                <br />\n\n                <Label style={labelStyle}>\n                    Last Name:\n                </Label>\n                <Input\n                    style={inputStyle}\n                    type='text'\n                    name='lastname'\n                    placeholder='Update Lastname'\n                    value={lastname}\n                    onChange={this.handleChange} />\n                <Button\n                    color='primary'\n                    style={buttonStyle}\n                    disabled={lastnameIsInvalid}\n                    onClick={() => this.handleSubmit('lastname')}>\n                    Update Lastname\n                </Button>\n                <hr />\n            </div >\n        );\n    };\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(UserProfile);","import React, { Component } from 'react';\nimport { withAuthorization } from './Session';\nimport { Link } from 'react-router-dom';\nimport * as Routes from '../constants/routes';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\n\n//Using Swal to display message when group is created\nconst Alert = withReactContent(Swal);\n\nconst labelStyle = {\n    marginBottom: '0px'\n};\n\nconst initialState = {\n    groupName: '',\n    groupDescription: '',\n    error: null\n};\n\nconst navLinkStyle = {\n    fontSize: '25px',\n    color: 'white',\n    textDecoration: 'none',\n}\n\nconst formStyle = {\n    fontSize: '25px',\n    width: '50%',\n    textAlign: 'center',\n    margin: '0 auto'\n};\n\nconst inputSize = {\n    fontSize: '20px',\n};\n\nconst headerStyle = {\n    textAlign: 'center',\n    marginBottom: '25px'\n};\n\nconst descriptionStyle = {\n    fontSize: '20px',\n    height: '200px'\n};\n\n\nclass CreateGroup extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { ...initialState };\n    };\n\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        const currentUserID = this.props.userID;\n\n        const { groupName, groupDescription } = this.state;\n\n        const dbResponse = await axios.post(`/api/creategroup`, { currentUserID, groupName, groupDescription });\n\n        Alert.fire({\n            type: `success`,\n            title: `${groupName} Created!`,\n            text: `Taking you to the club page. Why don't you pick a book or add a user?`\n        });\n\n        this.props.history.push(`/group/${dbResponse.data._id}`);\n    };\n\n    render() {\n        const { groupName, groupDescription, error } = this.state;\n\n        const isInvalid = groupName === '' || groupDescription === '';\n\n        return (\n            <div>\n                <h2 style={headerStyle}>Create your group!</h2>\n                {/* If there's an error with sign in then display the error */}\n                {error && <p>{error.message}</p>}\n\n                <Form style={formStyle} onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label style={labelStyle} htmlFor='groupName' for='text'> Group Name: </Label>\n                        <Input\n                            style={inputSize}\n                            type='text'\n                            name='groupName'\n\n                            placeholder='Enter A Group Name'\n                            value={this.state.groupName}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Label style={labelStyle} htmlFor='groupDescription' for='text'>Enter A Group Description: </Label>\n                        <Input\n                            style={descriptionStyle}\n                            type='textarea'\n                            name='groupDescription'\n                            placeholder='Description'\n                            value={this.state.groupDescription}\n                            onChange={this.handleChange}\n                        />\n                    </FormGroup>\n                    <Button\n                        color='primary'\n                        size='lg'\n                        disabled={isInvalid}\n                        type='submit'\n                    >Create New Group\n                    </Button>\n\n                </Form>\n            </div>\n\n\n        );\n    };\n};\n\nconst CreateGroupLink = () => (\n    <Link to={Routes.createGroup}>\n        <button style={navLinkStyle} className='btn btn-link'>Create Group</button>\n    </Link>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(CreateGroup);\n\nexport { CreateGroupLink };","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport { Button, Form, FormGroup, Label, Input, } from 'reactstrap';\n\n//Using Swal to display messages when submit button is hit\nconst Alert = withReactContent(Swal);\n\nconst labelStyle = {\n    marginBottom: '0px'\n};\n\n\nconst formlabelStyle = {\n    fontSize: '25px'\n};\n\nconst forminputsize = {\n    fontSize: '20px'\n};\n\nclass UserSearch extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userSearch: '',\n            error: null,\n            userArray: [],\n            searchSelect: ''\n        }\n    };\n\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        const { userSearch, searchSelect } = this.state;\n\n        const dbResponse = await axios.get(`/api/usersearch/${userSearch}/${searchSelect}`);\n\n        this.setState({ userArray: dbResponse.data });\n    }\n\n    render() {\n        const { userSearch, error, userArray, searchSelect } = this.state;\n        const isInvalid = userSearch === '' || searchSelect === '';\n\n        return (\n\n            <div>\n                {error && <p>{error}</p>}\n                <Form style={formlabelStyle} onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label style={labelStyle} for=\"text\"> Search By:</Label>\n                        <Input style={forminputsize} type='select' name='searchSelect' id=\"searchSelection\" value={this.state.searchSelect}\n                            onChange={this.handleChange}>\n                            <option value=''> </option>\n                            <option value='email'>Email</option>\n                            <option value='username'>Username</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label style={labelStyle} htmlFor='userSearch' for=\"text\"> Search Users:</Label>\n                        <Input style={forminputsize} type='text' name='userSearch' id=\"exampleEmail\" placeholder='Search User' value={this.state.userSearch}\n                            onChange={this.handleChange} />\n                    </FormGroup>\n\n                    <Button color=\"secondary\" size=\"lg\" disabled={isInvalid}\n                        type='submit'>Search User</Button>\n                </Form>\n\n                {userArray && userArray.map((user, i) => <SingleUser user={user} key={i} isAdmin={this.props.isAdmin} groupID={this.props.groupID} updatePage={this.props.updatePage} />)}\n            </div>\n\n\n\n\n        )\n    }\n}\n\n//This component is going to have state to wrap the book in the submit and send it to the database\nclass SingleUser extends Component {\n\n    addUserToGroup = async (event) => {\n        const { isAdmin, groupID } = this.props;\n        const { userID, username } = this.props.user;\n        const dbResponse = await axios.put(`/api/addusertogroup`, { isAdmin, groupID, userID });\n\n        if (dbResponse.status === 200) {\n            Alert.fire({\n                type: 'success',\n                title: `${username} Added!`,\n                text: 'Sending you back to the club page'\n            });\n            this.props.updatePage(`main`);\n        };\n    };\n\n    // Taking out the book object to make displaying it easier\n    render() {\n        const { isAdmin } = this.props;\n        const { email, username } = this.props.user;\n\n        return (\n            <div className='userCard'>\n                <div>Email: {email}</div>\n                <div>Username: {username}</div>\n\n                {isAdmin && <button className='btn btn-primary' onClick={this.addUserToGroup}>Add User To Group</button>}\n            </div>\n        );\n    };\n};\n\nexport default UserSearch;","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst UserList = (props) => {\n    return (\n        <Fragment>\n            <h2 >Group Members</h2>\n            <div>\n                {props.userlist.map((user, i) => <Link to={`/user/${user._id}`} key={i}><SingleUser userID={user._id} key={user._id} /></Link>)}\n            </div>\n            <br />\n        </Fragment>\n    );\n};\n\nclass SingleUser extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            error: null\n        };\n    };\n\n    componentDidMount = async () => {\n        const dbResponse = await axios.get(`/api/getuserbyid/${this.props.userID}`);\n        if (dbResponse.status === 200) {\n            this.setState({ username: dbResponse.data.local.username });\n        } else {\n            this.setState({ error: dbResponse.data });\n        };\n    };\n\n    render() {\n        return (\n            <div>{this.state.username}</div>\n        );\n    };\n};\n\n\n\nexport default UserList;","import React from 'react';\nimport { Button } from 'reactstrap';\n\nconst ButtonStyle = {\n    fontSize: '17px',\n};\n\nconst adminPanel = {\n    textAlign: 'center',\n    fontSize: '25px',\n    border: '1px solid grey',\n    padding: '10px',\n    marginBottom: '25px',\n    marginTop: '25px',\n    borderRadius: '5px'\n};\n\nconst GroupNav = (props) => {\n    return (\n        <div style={adminPanel} align='center' >\n            Admin Panel\n                <hr></hr>\n            <Button outline color='primary' style={ButtonStyle} onClick={() => props.updatePage('main')}>Show Club Page</Button>\n            <Button outline color='primary' style={ButtonStyle} onClick={() => props.updatePage('updateBook')}>Update Book</Button>\n            <Button outline color='primary' style={ButtonStyle} onClick={() => props.updatePage('addUser')}>Add User</Button>\n        </div>\n    )\n}\n\nexport default GroupNav;","import React, { Component, Fragment } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\n\nimport UserSearch from '../UserSearch';\nimport UserList from './UserList';\nimport GroupNav from './GroupNav';\nimport { Row, Col } from 'reactstrap';\n\n//Initializes all the data we need for the group as well as what should display on the app\nconst initialState = {\n  groupID: 0,\n  groupName: '',\n  groupDescription: '',\n  userlist: [],\n  isAdmin: false,\n  error: null,\n  showMainPage: true,\n  addUser: false\n};\n\nconst groupinfopanel = {\n  textAlign: 'center',\n  fontSize: '50px',\n\n  padding: '10px',\n  marginBottom: '30px'\n};\n\nconst columnbackground = {\n  fontSize: '30px',\n  padding: '10px',\n  marginBottom: '50px',\n  textAlign: 'center'\n};\n\nclass GroupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initialState };\n  }\n\n  componentDidMount() {\n    const groupIDFromURL = this.props.match.params.groupID;\n    if (typeof groupIDFromURL !== 'undefined') {\n      this.getGroupData(groupIDFromURL);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userID !== prevProps.userID) {\n      const groupID = this.props.match.params.groupID;\n      this.getGroupData(groupID);\n    }\n  }\n\n  getGroupData = async groupID => {\n    const dbResponse = await axios.get(`/api/getgroupdata/${groupID}`);\n    if (dbResponse.status === 200) {\n      this.setState(\n        {\n          groupID: dbResponse.data._id,\n          groupName: dbResponse.data.name,\n          groupDescription: dbResponse.data.description,\n          userlist: dbResponse.data.userlist,\n        },\n        () => {\n          //If statement incase the componentDidMount happens first\n          if (this.props.userID) {\n            this.checkAdmin();\n          }\n        }\n      );\n    } else {\n      //TODO Check Error message\n      this.setState({\n        error: dbResponse.data.error\n      });\n    }\n  };\n\n  checkAdmin = () => {\n    const { userlist } = this.state;\n    const currentUserID = this.props.userID;\n\n    const currentUser = userlist.filter(user => user._id === currentUserID);\n    if (currentUser[0].isAdmin) {\n      this.setState({\n        isAdmin: true\n      });\n    }\n  };\n\n  //Toggles the page based on what the user chooses to see\n  updatePage = showPage => {\n    switch (showPage) {\n      case 'main':\n        this.setState({\n          showMainPage: true,\n          updateBook: false,\n          addUser: false\n        });\n        this.getGroupData(this.state.groupID);\n        break;\n      case 'updateBook':\n        this.setState({\n          showMainPage: false,\n          updateBook: true,\n          addUser: false\n        });\n        this.getGroupData(this.state.groupID);\n        break;\n      case 'addUser':\n        this.setState({\n          showMainPage: false,\n          updateBook: false,\n          addUser: true\n        });\n        this.getGroupData(this.state.groupID);\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { groupID, groupName, groupDescription, userlist, error, isAdmin, addUser } = this.state;\n\n    return (\n      <div>\n        <Row>\n          <Col xs='6'>\n            {error && <p>{error.message}</p>}\n            {isAdmin &&\n              <Row>\n                <Col xs='3' />\n                <Col xs='6'>\n                  <GroupNav updatePage={this.updatePage} />\n                </Col>\n                <Col xs='3' />\n              </Row>\n            }\n            <div style={columnbackground}>\n              <UserList userlist={userlist} />\n            </div>\n          </Col>\n\n          <Col xs='6'>\n            <div style={groupinfopanel}>\n              <GroupInfo\n                groupName={groupName}\n                groupDescription={groupDescription}\n              />\n            </div>\n\n            {addUser && (\n              <UserSearch\n                groupID={groupID}\n                isAdmin={isAdmin}\n                updatePage={this.updatePage}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  };\n};\n\nconst GroupInfo = props => {\n  return (\n    <Fragment>\n      <strong>{props.groupName}</strong>\n\n      <br />\n      <h3>{props.groupDescription}</h3>\n    </Fragment>\n  );\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(GroupPage);\n","import React, { Component } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'reactstrap';\nimport { RosterDisplay } from '../Roster';\nimport 'react-table/react-table.css';\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport './seasonLongScoreStyle.css';\n\n\nconst Alert = withReactContent(Swal);\n\nclass SeasonLongScore extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            displayReadyRosters: []\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.season !== prevProps.season) {\n            this.seasonData(this.props.match.params.userId, this.props.season);\n        };\n    };\n\n    componentDidMount() {\n        if (this.props.season !== `` && this.props.match.params.userId !== ``) {\n            this.seasonData(this.props.match.params.userId, this.props.season);\n\n        }\n    }\n\n    seasonData(userId, season) {\n        this.loading();\n        axios.get(`/api/seasonLongScore/${userId}/${season}`)\n            .then(res => {\n                this.doneLoading();\n                this.sortRoster(res.data);\n            }).catch(err => {\n                console.log(`roster data error`, err); //TODO better error handling\n            });\n    };\n\n    sortRoster(seasonRostersArray) {\n        const displayReadyRosters = [];\n        for (let i = 0; i < seasonRostersArray.length; i++) {\n            displayReadyRosters[i] = this.sortWeek(seasonRostersArray[i]);\n        };\n        this.setState({ displayReadyRosters });\n    };\n\n    sortWeek(weekArray) {\n        const displayReadyRoster = {}; //It's saved as an object in the database\n\n        //Here we iterate through the roster of the player and put them into an object for the order we want\n        for (const player of weekArray) {\n            const position = player.position;\n            //If the position is QB, TE, or K then we can just put them directly in\n            if (position === `QB`) {\n                displayReadyRoster.QB = player;\n                //If it's RB or WR then we need to assign it manually to the 1, 2 and flex spots\n                //First we need to check the RB/WR 1 & 2 spots then assign it into the flex spot\n            } else if (position === `RB`) {\n                if (!displayReadyRoster.RB1) {\n                    displayReadyRoster.RB1 = player;\n                } else if (!displayReadyRoster.RB2) {\n                    displayReadyRoster.RB2 = player;\n                } else if (!displayReadyRoster.Flex) {\n                    displayReadyRoster.Flex = player;\n                }\n            } else if (position === `WR`) {\n                if (!displayReadyRoster.WR1) {\n                    displayReadyRoster.WR1 = player;\n                } else if (!displayReadyRoster.WR2) {\n                    displayReadyRoster.WR2 = player;\n                } else if (!displayReadyRoster.Flex) {\n                    displayReadyRoster.Flex = player;\n                };\n            } else if (position === `TE`) {\n                displayReadyRoster.TE = player;\n            } else if (position === `K`) {\n                displayReadyRoster.K = player;\n            };\n        };\n\n        return displayReadyRoster;\n    };\n\n    loading() {\n        Alert.fire({\n            title: 'Loading',\n            text: 'Loading available players',\n            imageUrl: 'https://media.giphy.com/media/3o7aDczpCChShEG27S/giphy.gif',\n            imageWidth: 200,\n            imageHeight: 200,\n            imageAlt: 'Loading Football',\n            showConfirmButton: false,\n            showCancelButton: false\n        });\n    };\n\n    doneLoading() {\n        Alert.close()\n    };\n\n\n    render() {\n        const rosterPlayers = ['QB', 'RB1', 'RB2', 'WR1', 'WR2', 'Flex', 'TE', 'K'];\n\n        return (\n            <div>\n                <Container fluid={true}>\n                    <Row>\n                        {this.state.displayReadyRosters.map((weekRoster, i) => (\n                            //The +1 in the week is because arrays begin at 0\n                            <WeekDisplay weekRoster={weekRoster} week={i + 1} key={i} rosterPlayers={rosterPlayers} />\n                            // <RosterDisplay rosterPlayers={rosterPlayers} addDropPlayer={null} currentRoster={weekRoster} nameCol={'12'} />\n                        ))}\n                    </Row>\n                </Container>\n            </div >\n        );\n    };\n};\n\nconst WeekDisplay = (props) => (\n    <Col xs='3'>\n        <Row>\n            <Col xs='12' className={'weekHeader'}>\n                Week {props.week}\n            </Col>\n        </Row>\n        <RosterDisplay rosterPlayers={props.rosterPlayers} addDropPlayer={false} currentRoster={props.weekRoster} nameCol={'9'} scoreCol={'3'} />\n    </Col>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(SeasonLongScore);","import React, { Component } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\nimport { Button, Row, Col } from 'reactstrap';\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst Alert = withReactContent(Swal);\n\nclass PlayerEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    };\n\n    loading() {\n        Alert.fire({\n            title: 'Loading',\n            text: 'Working your request',\n            imageUrl: 'https://media.giphy.com/media/3o7aDczpCChShEG27S/giphy.gif',\n            imageWidth: 200,\n            imageHeight: 200,\n            imageAlt: 'Loading Football',\n            showConfirmButton: false,\n            showCancelButton: false\n        });\n    };\n    doneLoading() {\n        Alert.close()\n    };\n\n    updateNFLRoster = () => {\n        this.loading();\n        axios.get(`/api/updateTeams`).then(response => {\n            this.doneLoading();\n            console.log(response.data);\n        });\n\n    };\n\n    getMassData = () => {\n        Alert.fire({\n            type: `warning`,\n            title: `Are you sure?`,\n            text: `It will take a LONG time`,\n            showCancelButton: true,\n        }).then(async result => {\n            if (result.value) {\n                Alert.fire(`Success`, `This will be a while. Go play some games?`, `success`);\n                this.loading(); // This successfully updates the database but doneLoading doesn't work\n                const response = await axios.get(`/api/massPlayerUpdate/${this.props.season}/`);\n                this.doneLoading();\n                console.log(response);\n            };\n        });\n    };\n\n    getWeeklyData = async () => {\n        this.loading();\n        try {\n            await axios.get(`/api/updatePlayers/${this.props.season}/${this.props.week}`);\n\n            this.doneLoading();\n        } catch (err) {\n            console.log(err)\n        };\n        this.doneLoading();\n    };\n\n    rankPlayers = async () => {\n        try {\n            await axios.get(`/api/rankPlayers/${this.props.season}/${this.props.week}/${this.props.groupId}`)\n        } catch (err) {\n            console.log(err);\n        };\n    };\n\n    render() {\n        return (\n            <Row>\n                <Col>\n                    <Button color='warning' onClick={this.getMassData}>\n                        Mass Update All Players\n                    </Button>\n                    <br />\n                    <br />\n                    <Button color='secondary' onClick={this.updateNFLRoster}>\n                        Update NFL Roster\n                    </Button>\n                    <br />\n                    <br />\n                    <Button color='secondary' onClick={this.getWeeklyData}>\n                        Update Get Weekly Data\n                    </Button>\n                    <br />\n                    <br />\n                    <Button color='primary' onClick={this.rankPlayers}>\n                        Rank Players\n                    </Button>\n                </Col>\n            </Row>\n        );\n    };\n\n\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(PlayerEditor);","import React, { Component } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\nimport { Input, Form, FormGroup, Button, Row, Col } from 'reactstrap';\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport ReactTable from 'react-table';\n\nimport 'react-table/react-table.css';\nimport './userEditorStyle.css';\n\nconst Alert = withReactContent(Swal);\n\nclass UserEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSelected: false,\n            selectedUser: {\n                username: ''\n            },\n            groupSelect: ``,\n            userArray: [],\n            loading: true,\n            QB: 0,\n            RB1: 0,\n            RB2: 0,\n            WR1: 0,\n            WR2: 0,\n            Flex: 0,\n            TE: 0,\n            K: 0\n        };\n    };\n\n    componentDidMount() {\n        axios.get(`/api/getAllUsers`).then(res => {\n            this.setState({ loading: false, userArray: res.data });\n        });\n    };\n\n    loading() {\n        Alert.fire({\n            title: 'Loading',\n            text: 'Working your request',\n            imageUrl: 'https://media.giphy.com/media/3o7aDczpCChShEG27S/giphy.gif',\n            imageWidth: 200,\n            imageHeight: 200,\n            imageAlt: 'Loading Football',\n            showConfirmButton: false,\n            showCancelButton: false\n        });\n    };\n    doneLoading() {\n        Alert.close()\n    };\n\n    dummyRoster = async () => {\n        const dummyRoster = [\n            this.state.QB,\n            this.state.RB1,\n            this.state.RB2,\n            this.state.WR1,\n            this.state.WR2,\n            this.state.Flex,\n            this.state.TE,\n            this.state.K\n        ];\n\n        await axios.put(`/api/dummyRoster/`,\n            { userId: this.state.selectedUser._id, groupId: this.state.groupSelect, season: this.props.season, week: this.props.week, dummyRoster });\n        // this.setState({ QB: 0, RB1: 0, RB2: 0, WR1: 0, WR2: 0, Flex: 0, TE: 0, K: 0 })\n    };\n\n    createRoster = async () => {\n        const dbResponse = await axios.post(`/api/createRoster/${this.state.selectedUser}`);\n        console.log(dbResponse)\n    };\n\n    //This is to handle the change for the Input Type in the position search below\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    selectUser = (user) => {\n        this.setState({ selectedUser: user, isSelected: true, groupSelect: user.groupList[0] })\n    };\n\n    calculateScores = async () => {\n        this.loading();\n        await axios.get(`/api/calculateScore/${this.props.season}/${this.props.week}/`);\n        this.doneLoading();\n    };\n\n    fillDummyRoster = () => {\n        this.setState({\n            QB: 7549,\n            RB1: 8285,\n            RB2: 9791,\n            WR1: 9952,\n            WR2: 7013,\n            Flex: 7380,\n            TE: 7299,\n            K: 6997\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Row>\n                    <Col xs='6'>\n                        <SelectedUser selectedUser={this.state.selectedUser} />\n                    </Col>\n                    <Col xs='6'>\n                        {this.state.isSelected &&\n                            <Input value={this.state.groupSelect} type='select' name='groupSelect' id='groupSelect' onChange={this.handleChange}>\n                                {this.state.selectedUser.groupList.map((group, i) =>\n                                    <option key={i}>{group}</option>)}\n                            </Input>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs='12'>\n                        <Button onClick={this.calculateScores} color='primary' className='calculateScoreButton'>\n                            Update Scores\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form onSubmit={this.dummyRoster}>\n                            <FormGroup>\n                                <Row>\n                                    <Col sm='12' md='6'>\n                                        <div className='playerIdInput'>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    QB\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.QB} type='text' name='QB' id='QB' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    RB1\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.RB1} type='text' name='RB1' id='RB1' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    RB2\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.RB2} type='text' name='RB2' id='RB2' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    WR1\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.WR1} type='text' name='WR1' id='WR1' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    WR2\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.WR2} type='text' name='WR2' id='WR2' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    Flex\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.Flex} type='text' name='Flex' id='Flex' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    TE\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.TE} type='text' name='TE' id='TE' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col sm='12' md='2' className='positionColumn'>\n                                                    K\n                                                </Col>\n                                                <Col sm='12' md='10'>\n                                                    <Input value={this.state.K} type='text' name='K' id='K' onChange={this.handleChange} />\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </Col>\n                                    {this.state.isSelected &&\n                                        <Col sm='12' md='6'>\n                                            {/* If the admin hasn't yet selected a user then they will not be allowed to view */}\n                                            <Button onClick={this.fillDummyRoster} disabled={!this.state.selectedUser} className='userEditorButton'>\n                                                Fill Dummy Roster\n                                            </Button>\n                                            <Button color='secondary' onClick={this.dummyRoster} disabled={!this.state.selectedUser} className='userEditorButton'>\n                                                Submit Dummy Roster\n                                            </Button>\n                                            <Button color='info' onClick={this.createRoster} disabled={!this.state.selectedUser} className='userEditorButton rightButton'>\n                                                TODO Create User Roster\n                                        </Button>\n                                        </Col>\n                                    }\n                                </Row>\n                            </FormGroup>\n                        </Form>\n                    </Col>\n                </Row>\n                <UserTable userArray={this.state.userArray} loading={this.state.loading} selectUser={this.selectUser} />\n            </div>\n        );\n    };\n};\n\nconst SelectedUser = (props) => {\n    return (\n        <Row>\n            <Col xs='12'>\n                <div className='selectedUser'>\n                    Selected User: <Input value={props.selectedUser.username} type='text' disabled />\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nconst UserTable = (props) => {\n    return (\n        <Row>\n            <Col xs='12'>\n                <ReactTable\n                    data={props.userArray}\n                    columns={[\n                        { Header: 'Username', accessor: 'username', show: true },\n                        { Header: 'email', accessor: 'email', show: true },\n                        { Header: 'Id', accessor: '_id', show: true }\n                    ]}\n                    loading={props.loading}\n                    filterable\n                    defaultPageSize={20}\n                    className=\"-highlight\"\n                    getTdProps={(state, rowInfo) => {\n                        return {\n                            onClick: () => {\n                                if (!rowInfo) { return };\n                                props.selectUser(rowInfo.original);\n                            }\n                        };\n                    }}\n                />\n            </Col>\n        </Row>\n    );\n};\n\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(UserEditor);\n\n//These should really be taken together since they're used together\nexport { UserTable, SelectedUser };","import React, { Component } from 'react';\nimport { withAuthorization } from '../Session';\nimport { Label, Input, Container, Button, Row, Col } from 'reactstrap';\nimport axios from 'axios';\n\nimport PlayerEditor from './PlayerEditor';\nimport UserEditor from './UserEditor';\n\nclass AdminPanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userEditor: false,\n            playerEditor: false,\n            weekSelect: 1,\n            seasonSelect: ``\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.season !== prevProps.season) { // season here because it's the last prop we pass in. Probably not the best way\n            this.setState({ weekSelect: this.props.week, seasonSelect: this.props.season });\n        };\n    };\n\n    componentDidMount() {\n        if (typeof this.props.season !== `undefined`) {\n            this.setState({ seasonSelect: this.props.season });\n        };\n        if (typeof this.props.week !== `undefined`) {\n            this.setState({ weekSelect: this.props.week });\n        };\n    };\n\n    showPlayerEditor = () => {\n        this.setState({ playerEditor: true, userEditor: false })\n    };\n\n    showUserEditor = () => {\n        this.setState({ playerEditor: false, userEditor: true })\n    };\n\n    createAllRosters = async () => {\n        const dbResponse = await axios.post(`/api/createAllRosters/${this.state.seasonSelect}`);\n        console.log(dbResponse)\n    };\n\n    //This is to handle the change for the Input Type in the position search below\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    render() {\n        const { playerEditor, userEditor } = this.state;\n\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <Col sm='12' md='3'>\n                        <Label for='seasonSelect'>Select Season</Label>\n                        <Input value={this.state.seasonSelect} type='select' name='seasonSelect' id='seasonSelect' onChange={this.handleChange}>\n                            <option>2019-2020-regular</option>\n                            <option>2020-2021-regular</option>\n                        </Input>\n                        <Label for='weekSelect'>Select Week</Label>\n                        <Input value={this.state.weekSelect} type='select' name='weekSelect' id='weekSelect' onChange={this.handleChange}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                            <option>5</option>\n                            <option>6</option>\n                            <option>7</option>\n                            <option>8</option>\n                            <option>9</option>\n                            <option>10</option>\n                            <option>11</option>\n                            <option>12</option>\n                            <option>13</option>\n                            <option>14</option>\n                            <option>15</option>\n                            <option>16</option>\n                            <option>17</option>\n                        </Input>\n                        <br />\n                        <br />\n                        <Button color='primary' onClick={this.showPlayerEditor}>Player Editor</Button>\n                        <br />\n                        <br />\n                        <Button color='primary' onClick={this.showUserEditor}>User Editor</Button>\n                        <br />\n                        <br />\n                        <Button color='primary' onClick={this.createAllRosters}>Create All Rosters</Button>\n                    </Col>\n                    <Col sm='12' md='9'>\n                        {playerEditor &&\n                            <PlayerEditor week={this.state.weekSelect} season={this.state.seasonSelect} groupId={this.props.groupId} />\n                        }\n                        {userEditor &&\n                            <UserEditor week={this.state.weekSelect} season={this.state.seasonSelect} />\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\n// TODO Add a check here to make sure that the user is an admin\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(AdminPanel);","import React, { Component } from 'react';\nimport { withAuthorization } from '../Session';\nimport axios from 'axios';\nimport { Container, Button, Row, Col } from 'reactstrap';\nimport { UserTable, SelectedUser } from './UserEditor';\n\nimport './upgradeToAdmin.css';\n\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\n//Using Swal to display messages when add book button is hit\nconst Alert = withReactContent(Swal);\n\nclass UpgradeToAdmin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedUser: ``,\n            userArray: [],\n            loading: true,\n        };\n    };\n\n    componentDidMount() {\n        axios.get(`/api/getAllUsers`).then(res => {\n            this.setState({ loading: false, userArray: res.data });\n        });\n    };\n\n    selectUser = (id) => {\n        this.setState({ selectedUser: id })\n    };\n\n    upgradeToAdmin = async () => {\n        const serverResponse = await axios.put(`/api/updateUserToAdmin/${this.state.selectedUser._id}`);\n        Alert.fire({\n            type: 'success',\n            text: serverResponse.data\n        });\n    };\n\n    render() {\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <Col xs='12' className='upgradeCol'>\n                        <SelectedUser selectedUser={this.state.selectedUser} />\n                        <Button className='adminButton' onClick={this.upgradeToAdmin} disabled={!this.state.selectedUser} >Upgrade to Admin</Button>\n                        <UserTable userArray={this.state.userArray} loading={this.state.loading} selectUser={this.selectUser} />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    };\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(UpgradeToAdmin);","import React, { Component } from 'react';\nimport { Row, Col, Button } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\n\nclass RosterButton extends Component {\n    redirect = () => {\n        const redirectValue = '/roster/' + this.props.userId;\n\n        this.props.history.push(redirectValue);\n    };\n    render() {\n        return (\n            <Row className='rosterButton'>\n                <Col xs='0' md='4' />\n                <Col xs='12' md='4'>\n                    <div className='centerText'>\n                        <Button color='info' onClick={this.redirect}>\n                            View {this.props.username}'s Roster\n                        </Button>\n                    </div>\n                </Col>\n                <Col xs='0' md='4' />\n            </Row>\n        );\n    };\n};\n\nexport default withRouter(RosterButton);","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css';\nimport { Container, Col, Row } from 'reactstrap';\n\nimport './usedPlayerStyle.css';\nimport RosterButton from '../Roster/RosterButton';\n\nclass UsedPlayers extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            usedPlayers: [],\n            loading: false,\n            usernameOfPage: '',\n        };\n    };\n\n    componentDidMount() {\n        if (this.props.season !== '') {\n            this.getUsedPlayers();\n            this.getCurrentUsername();\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (this.props.season !== prevProps.season) {\n            this.getUsedPlayers();\n            this.getCurrentUsername();\n        };\n    };\n\n    getCurrentUsername() {\n        axios.get(`/api/getUserById/${this.props.match.params.userId}`)\n            .then(res => {\n                this.setState({ usernameOfPage: res.data.local.username })\n            }).catch(err => {\n                console.log(err); //TODO better error handling\n            });\n    };\n\n    getUsedPlayers = () => {\n        this.setState({ loading: true });\n        axios.get(`/api/getUsedPlayers/${this.props.match.params.userId}/${this.props.season}`)\n            .then(res => {\n                this.setState({ usedPlayers: res.data, loading: false });\n            }).catch(err => {\n                console.log(err)//TODO Better error handling\n            });\n\n    };\n\n    render() {\n        const columns = [\n            { Header: `QB`, accessor: `QB`, show: true },\n            { Header: `RB`, accessor: `RB`, show: true },\n            { Header: `WR`, accessor: `WR`, show: true },\n            { Header: `TE`, accessor: `TE`, show: true },\n            { Header: `K`, accessor: `K`, show: true }];\n\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <Col xs='12'>\n                        <Row>\n                            <Col xs='12'>\n                                <div className='centerText titleMargin headerFont'>\n                                    {this.state.usernameOfPage}'s Used Players\n                                </div>\n                                <RosterButton\n                                    username={this.state.usernameOfPage}\n                                    userId={this.props.match.params.userId} />\n                            </Col>\n                        </Row>\n                        <ReactTable\n                            data={this.state.usedPlayers}\n                            columns={columns}\n                            loading={this.state.loading}\n                            defaultPageSize={50}\n                            className=\"-highlight\"\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n\nexport default UsedPlayers;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Container, Button, Row, Col, Input } from 'reactstrap';\n\n//Using Swal to display messages when add book button is hit\n\nclass CreateAllGroup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: ``\n        };\n    };\n\n    CreateAllGroup = async () => {\n        this.setState({ password: `` });\n        await axios.post(`/api/createAllGroup/${this.state.password}`);\n    };\n\n    PurgeDB = async () => {\n        this.setState({ password: `` });\n        await axios.post(`/api/purgeUserAndGroupDB/${this.state.password}`);\n    };\n\n    //This is to handle the change for the Input Type in the position search below\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    render() {\n        return (\n            <Container fluid={true}>\n                <Row>\n                    <Col xs='12'>\n                        <Input value={this.state.password} type='text' name='password' onChange={this.handleChange} />\n                        <br />\n                        <Button onClick={this.CreateAllGroup}>Create General Group</Button>\n                        <br />\n                        <br />\n                        <Button onClick={this.PurgeDB}>Purge DB</Button>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    };\n};\n\n\nexport default CreateAllGroup;","import React, { Component } from 'react';\nimport * as Routes from './constants/routes';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { withFirebase } from './componenets/Firebase';\nimport axios from 'axios';\n\n// Components\nimport SignUpPage from './componenets/SignUp';\nimport SignInPage from './componenets/SignIn';\nimport NavBar from './componenets/NavBar';\n// import GroupBar from './componenets/GroupBar';\nimport Home from './componenets/Home';\nimport PasswordReset from './componenets/PasswordReset';\nimport PasswordChange from './componenets/PasswordChange';\nimport UserProfile from './componenets/UserProfile';\nimport CreateGroup from './componenets/CreateGroup';\nimport GroupPage from './componenets/GroupPage';\nimport SeasonLongScore from './componenets/SeasonLongScore';\nimport Roster from './componenets/Roster';\nimport AdminPanel from './componenets/AdminPanel';\nimport UpgradeToAdmin from './componenets/AdminPanel/UpgradeToAdmin';\nimport UsedPlayers from './componenets/UsedPlayers';\nimport CreateAllGroup from './componenets/GroupPage/CreateAllGroup';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      authUser: null,\n      currentUser: {},\n      currentWeek: 0,\n      currentSeason: ``,\n      groupList: [],\n      currentGroup: {},\n      positionOrder: [],\n    }\n\n  };\n\n  componentDidMount() {\n    this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.setState({ authUser });\n        this.isSignedIn(authUser.email);\n      } else {\n        this.setState({ authUser: null, currentUser: {} });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.listener();\n  };\n\n  isSignedIn = async (email) => {\n    const dbResponse = await axios.get(`/api/getUser/${email}`);\n    const currentUser = {\n      username: dbResponse.data.UN,\n      userId: dbResponse.data._id,\n      isAdmin: dbResponse.data.A,\n    };\n    const playerPositions = await axios.get(`/api/getPositionData`);\n\n    this.setState({\n      currentUser,\n      groupList: dbResponse.data.GL,\n      currentGroup: { N: dbResponse.data.GL[0].N, _id: dbResponse.data.GL[0]._id },\n      positionOrder: playerPositions.data\n    });\n    this.getSeasonAndWeek();\n  };\n\n  getSeasonAndWeek = async () => {\n    const seasonAndWeek = await axios.get(`/api/currentSeasonAndWeek`);\n    this.setState({ currentSeason: seasonAndWeek.data.season, currentWeek: seasonAndWeek.data.week })\n  };\n\n  render() {\n\n    return (\n\n      <BrowserRouter>\n\n        <div>\n          <NavBar authUser={this.state.authUser} />\n          {/* <GroupBar\n            groupList={this.state.groupList}\n          /> */}\n          <Route\n            exact path={Routes.home}\n            render={() =>\n              <Home\n                userId={this.state.currentUser.userId}\n                username={this.state.currentUser.username}\n                isAdmin={this.state.currentUser.isAdmin}\n                season={this.state.currentSeason}\n                group={this.state.currentGroup}\n                week={this.state.currentWeek}\n                positionOrder={this.state.positionOrder}\n              />}\n          />\n          <Route\n            path={Routes.adminPanel}\n            render={() =>\n              <AdminPanel\n                week={this.state.currentWeek}\n                season={this.state.currentSeason}\n                groupId={this.state.currentGroup._id} />}\n          />\n          <Route\n            path={Routes.signin}\n            render={() =>\n              <SignInPage />}\n          />\n          <Route\n            path={Routes.signup}\n            render={() =>\n              <SignUpPage />}\n          />\n          <Route\n            path={Routes.passwordReset}\n            render={() =>\n              <PasswordReset />}\n          />\n          <Route\n            path={Routes.passwordChange}\n            render={() =>\n              <PasswordChange />}\n          />\n          <Route\n            path={Routes.userProfile}\n            render={() =>\n              <UserProfile />}\n          />\n          <Route\n            path={Routes.createGroup}\n            render={() =>\n              <CreateGroup\n                userID={this.state.currentUser.userID} />}\n          />\n          <Route\n            path={`/group/:groupID`}\n            render={() =>\n              <GroupPage\n                userID={this.state.currentUser.userID} />}\n          />\n          <Route\n            path={Routes.seasonLongScore}\n            render={() =>\n              <SeasonLongScore\n                season={this.state.currentSeason} />}\n          />\n          <Route\n            path={Routes.roster}\n            render={props =>\n              <Roster\n                {...props}\n                userId={this.state.currentUser.userId}\n                week={this.state.currentWeek}\n                season={this.state.currentSeason} />\n            }\n          />\n          <Route\n            path={Routes.upgradeToAdmin}\n            render={() =>\n              <UpgradeToAdmin />}\n          />\n          <Route\n            path={Routes.usedPlayers}\n            render={props =>\n              <UsedPlayers\n                {...props}  //Need to pass down the props spread to have access to the URL\n                season={this.state.currentSeason}\n                week={this.state.currentWeek} />\n            }\n          />\n          <Route\n            path={Routes.CreateAllGroup}\n            render={() =>\n              <CreateAllGroup />}\n          />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withFirebase(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Firebase, { FirebaseContext } from './componenets/Firebase';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render( \n\t<FirebaseContext.Provider value={new Firebase()}>\n\t\t<App />\n\t</FirebaseContext.Provider>,\n\tdocument.getElementById('root')\n)"],"sourceRoot":""}